<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.Internal.AnimationSettings">
            <summary>
            Animation properties for performing animation transition.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RippleSettings">
            <summary>
            Ripple settings for performing the ripple effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.BlazorIdJsonConverter">
            <summary>
            Custom JSON serialization type converter for the Template DataHashTable properties.
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Internal.TemplateConverter">
            <summary>
            Custom JSON serialization type converter for the Template properties.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.NonFlagStringEnumConverter">
            <summary>
            Used to convert the enum integer values into a string
            Also, ignores the string conversion of number enum.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.FontInfo">
            <summary>
            Circular, Linear Gauges and TreeMap common property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ScriptModules">
            <summary>
            Script modules for the wrapper and hybrid components.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.SfScriptModules">
            <summary>
            Script modules for the native rendering components.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.GlobalizeJsonGenerator">
            <summary>
            Generates globalization details for the specific culture in JSON format.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.GlobalizeJsonGenerator.GetGlobalizeContent(System.Globalization.CultureInfo)">
            <summary>
            Returns current culture information in the Dictionary format.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.Intl">
            <summary>
            A static class for the Internationalization common features and functionalities.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetDateFormat``1(``0,System.String,System.String)">
            <summary>
            Returns formatted date string based on the current culture.
            </summary>
            <param name="date">Date value to be formatted.</param>
            <param name="format">Format string for processing date format.</param>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns formatted string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetNumericFormat``1(``0,System.String,System.String,System.String)">
            <summary>
            Returns formatted number string based on the current culture.
            </summary>
            <param name="numberValue">Number value to be formatted.</param>
            <param name="format">Format string for processing number format.</param>
            <param name="culture">Optional parameter to override the current culture.</param>
            <param name="currencyCode">Optional parameter to process the currency code.</param>
            <returns>Returns formatted string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetWeekOfYear(System.DateTime,System.String,System.Boolean,System.Globalization.CalendarWeekRule)">
            <summary>
            Returns the week of year based on the current culture.
            </summary>
            <param name="dateValue">Date value to be calculated.</param>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns the week of year</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetFirstDayOfWeek(System.DateTime,System.String)">
            <summary>
            Returns the first day of week based on the current culture.
            </summary>
            <param name="dateValue">Date value to be calculated.</param>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns the first day of week</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetNarrowDayNames(System.String)">
            <summary>
            Returns the narrow day names based on the current culture.
            </summary>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns the narrow day names</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetCulture(System.String)">
            <summary>
            Returns the current culture information.
            </summary>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns the current culture</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.SetCulture(System.Globalization.CultureInfo)">
            <summary>
            Set culture info to Intl class.
            </summary>
            <param name="culture">Culture info needs to be set to the Intl.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.SetCulture(System.String)">
            <summary>
            Set culture string to Intl class.
            </summary>
            <param name="culture">Culture string needs to be set to the Intl.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetNativeDigits(System.String,System.String[])">
            <summary>
            Converts native digits based on the current culture.
            </summary>
            <param name="formatValue">Format to be converted to native digits.</param>
            <param name="nativeDigits">Native digits of the current culture.</param>
            <returns>Returns the current culture</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetCultureFormats(System.String)">
            <summary>
            Returns the required patterns from the current culture
            </summary>
            <param name="cultureCode">Culture code to be processed for the required patterns.</param>
            <returns>Returns culture patterns</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ISfCircularComponent">
            <summary>
            An interface for circular component reference. 
            GridColumns -> GridColumn -> GridColumns -> GridColumn
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.SyncfusionStringLocalizer">
            <summary>
            Implements the Syncfusion Localizer for injecting its service
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.LocalizerDetails">
            <summary>
            Maintains the Localizer details for performing Localization.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.GetLocaleText">
            <summary>
            Returns the locale text for hybrid and wrapper components from the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.GetString(System.String)">
            <summary>
            Returns the locale text from the ResourceManager.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.Dispose">
            <summary>
            Dispose the unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.LocaleKeys">
            <summary>
            Add the component and its dependent component locale keys from the LocaleService/GetMappingLocale method.
            This only applicable for the wrapper components.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.Dispose">
            <summary>
            Dispose the unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.SfBaseUtils">
            <summary>
            Common utility methods which can be used in all the Syncfusion Blazor components.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.UpdateDictionary(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update the given dictionary value based on the key value check.
            </summary>
            <param name="key">Key needs to be updated in the dictionary.</param>
            <param name="data">Value needs to be updated for the specific key.</param>
            <param name="dictionary">Dictionary needs to be add or updated.</param>
            <returns>Returns updated Dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.GetAttribtues(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update the dictionary based on the @attributes key value check.
            <param name="classList">class list to be added in the string format.</param>
            <param name="dictionary">@attribute property value for updating class list.</param>
            <returns>Returns Dictionary.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.Equals``1(``0,``0)">
            <summary>
            Returns the bool value based on comparing given values with the EqualityComparer.
            </summary>
            <param name="oldValue">Old value of the property.</param>
            <param name="newValue">New value of the property.</param>
            <returns>Returns bool value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.UpdateProperty``1(``0,``0,Microsoft.AspNetCore.Components.EventCallback{``0},Microsoft.AspNetCore.Components.Forms.EditContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Invoking events for two-way bindings property changes.
            </summary>
            <param name="publicValue">Public value needs to be updated in the two-way binding event.</param>
            <param name="privateValue">Private value to compare with public value for invoking two-way bindings.</param>
            <param name="eventCallback">EventCallback for invoking two-way binding event handler function.</param>
            <param name="editContext">EditContext instance for invoking NotifyFieldChanged method.</param>
            <param name="expression">Expression needs to be passed in the NotifyFieldChanged method.</param>
            <returns>Returns public property value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ToDoubleArray(System.Object)">
            <summary>
            Convert given arguments into double array
            </summary>
            <param name="args">arguments for convert into double array.</param>        
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ValidateExpression``1(Microsoft.AspNetCore.Components.Forms.EditContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Notify the field changes of the EditContext with specified expression.
            </summary>
            <param name="editContext">EditContext instance for invoking the NotifyFieldChanged method.</param>
            <param name="expression">Expression need to be passed in the NotifyFieldChanged method.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ImportModule(Microsoft.JSInterop.IJSRuntime,Syncfusion.Blazor.Internal.SfScriptModules,System.String)">
            <summary>
            Import component specific interop script modules in the application.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="scriptModule">Component specific interop script module.</param>
            <returns>JSObjectReference</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ImportModules(Microsoft.JSInterop.IJSRuntime,System.Collections.Generic.List{Syncfusion.Blazor.Internal.ScriptModules},System.String)">
            <summary>
            Import component dependent interop script modules in the application.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="scriptModule">Component specific interop script module.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ImportScripts(Microsoft.JSInterop.IJSRuntime,System.String)">
            <summary>
            Async method to execute script module import.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="modulePath">Module path to be load the script modules.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.InvokeEvent``1(System.Object,``0)">
            <summary>
            Invokes event handler function of the corresponding event name with parameters.
            </summary>
            <param name="eventFn">EventCallback to invoke the event handler method.</param>
            <param name="eventArgs">Arguments of the event handler method.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ChangeType(System.Object,System.Type,System.Boolean)">
            <summary>
            Convert an object to the specified type.
            </summary>
            <param name="dataValue">Value needs to be converted with specific type.</param>
            <param name="conversionType">Type that needs to be converted to the given value.</param>
            <param name="isClientChange">Validate the client changes for the wrapper and hybrid components.</param>
            <returns>Returns converted object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.GenerateID(System.String)">
            <summary>
            Generate the unique Guid
            </summary>
            <param name="name">add addtional name into ID.</param>
            <returns>Returns ID string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.InvokeMethod(Microsoft.JSInterop.IJSRuntime,System.String,System.Object[])">
            <summary>
            Invoke void return type methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.InvokeMethod``1(Microsoft.JSInterop.IJSRuntime,System.String,System.Object[])">
            <summary>
            Invoke object return type methods
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.CompareValues``1(``0,``0)">
            <summary>
            compare the two values and returns a value indicating whether one value is less than, equal to, or greater than the second value.
            </summary>
            <returns>Less than Zero - value1 is less than value 2</returns>
            <returns>Zero - Both are equals</returns>
            <returns>Greater than Zero - value1 is greater than value 2</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.AddClass(System.String,System.String)">
            <summary>
            Add a class to the existing string content.
            </summary>
            <param name="prevClass">Previous class list in string format.</param>
            <param name="className">Class name needs to be added in the string content.</param>
            <returns>Returns class string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.RemoveClass(System.String,System.String)">
            <summary>
            Remove a class from the existing string content.
            </summary>
            <param name="prevClass">Previous class list in string format.</param>
            <param name="className">Class name needs to be removed in the string content.</param>
            <returns>Returns class string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.AddArrayValue``1(``0[],``0)">
            <summary>
            Adds a value to a array.
            <param name="arrayValue">array to which value should be added.</param>
            <param name="addValue">value to be added to the array</param>
            <returns>Returns Dictionary.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.RemoveArrayValue``1(``0[],``0)">
            <summary>
            Removes a value from a array.
            <param name="arrayValue">array to which value should be removed.</param>
            <param name="addValue">value to be removed from the array</param>
            <returns>Returns Dictionary.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.IsNotNullOrEmpty(System.Collections.IList)">
            <summary>
            Returns true if the list value is not null or empty
            <param name="list">list value to be checked for having null or empty values.</param>
            <returns>Returns boolean value.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.FormatUnit(System.String)">
            <summary>
            Function to normalize the units applied to the element
            </summary>
            <param name="propertyValue">Value</param>
            <returns>Retuns normalized unit value</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.GetEnumValue``1(``0)">
            <summary>
            Returns enumeration member value.
            </summary>
            <param name="enumValue">Actual enumeration value to be processed for its member value.</param>
            <returns>Returns actual enumeration member value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.EnableRtl(Microsoft.JSInterop.IJSRuntime,System.Boolean)">
            <summary>
            Invokes enableRtl method to client side.
            </summary>
            <param name="jSRuntime">JsRuntime to invoke the client side method.</param>
            <param name="isEnabled">A boolean value needs to be set for the enableRtl behavior.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.DataSourceTypeConverter">
            <summary>
            Custom JSON serialization type converter for the DataSource properties.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IBaseComponent">
            <summary>
            An interface for BaseComponent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IJSInteropAdaptor">
            <summary>
            An interface for implementing JSInteropAdaptor. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.JSInteropAdaptor">
            <summary>
            Custom handler of JSInterop to invoke the JavaScript methods with DotNetObjectReference.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IValidator">
            <summary>
            Interface for validator
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ValidationContext">
            <summary>
            Validation context that shares the current validated field details.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ValidationResult">
            <summary>
            Validation result of the currently done validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.Validator">
            <summary>
            Validator that handles column validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RequiredValidator">
            <summary>
            Class that performs required field validation
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.EmailAddressValidator">
            <summary>
            Class that performs email validation
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MaxLengthValidator">
            <summary>
            Class that performs max length validation
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MinLengthValidator">
            <summary>
            Class that performs min length validation
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.StringLengthValidator">
            <summary>
            Class that performs range length or string length validation
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RangeValidator">
            <summary>
            Class that performs range validation
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RegexValidator">
            <summary>
            Class that performs regex validation
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.NumberValidator">
            <summary>
            Class that performs number validation
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MaxValidator">
            <summary>
            Class that performs max value validation
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MinValidator">
            <summary>
            Class that performs min value validation
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ValidationRuleBase">
            <summary>
            Provides validation rules and message customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Required">
            <summary>
            Validates the given value is present or not null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.RangeLength">
            <summary>
            Validates that given string is in range length given.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Range">
            <summary>
            Validates that given value is within range.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.MinLength">
            <summary>
            Validates that given value length is greater than minlength value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.MaxLength">
            <summary>
            Validates that given value length is lesser than maxlength value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.RegexPattern">
            <summary>
            Validates that given value matches the given regex.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Email">
            <summary>
            Validates that given value is an e-mail.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Number">
            <summary>
            Validates that given value is a number.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Min">
            <summary>
            Validates that given value is greater than min value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Max">
            <summary>
            Validates that given value is lesser than max value.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ValidationRuleBase.Messages">
            <summary>
            Gets or sets the error messages for the validation rules.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SyncfusionLicense.Dispose">
            <summary>
            Dispose the unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DOM">
            <summary>
            The HTML DOM equivalent C# class object to define basic properties and perform the basic DOM operations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.ID">
            <summary>
            A unique ID of the HTML DOM element object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.AddClass(System.String[],System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.AddClass(System.String[])">
            <summary>
            Add a list of CSS classes to the HTML DOM element.
            </summary>
            <param name="classList">An array of string CSS class to be added in the HTML DOM.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.RemoveClass(System.String[],System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.RemoveClass(System.String[])">
            <summary>
            Remove a list of CSS classes in the HTML DOM element.
            </summary>
            <param name="classList">An array of string CSS class to be removed in the HTML DOM.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.GetClassList">
            <summary>
            Get the CSS class names from the HTML DOM element.
            </summary>
            <returns>Returns CSS class names in string of Array</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.SetAttribute(System.String,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.SetAttribute(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.SetAttribute(System.String,System.Double)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.SetAttribute``1(System.String,``0)">
            <summary>
            Set the attribute to the HTML DOM element.
            </summary>
            <param name="attributeName">The attribute name needs to be updated in the HTML element.</param>
            <param name="attributeValue">The attribute value needs to be updated to the corresponding attribute in the HTML element.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.GetAttribute(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.GetAttribute``1(System.String)">
            <summary>
            Get the attribute value from the HTML DOM element.
            </summary>
            <param name="attributeName">The attribute name to get the attribute value from the HTML element.</param>
            <returns>Returns the HTML attribute value with specific type</returns>
        </member>
        <member name="T:Syncfusion.Blazor.AnimationEffect">
            <summary>
            Specifies the Animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideLeftIn">
            <summary>
            Defines the Animation effect as SlideLeftIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideRightIn">
            <summary>
            Defines the Animation effect as SlideRightIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeIn">
            <summary>
            Defines the Animation effect as FadeIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeOut">
            <summary>
            Defines the Animation effect as FadeOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeZoomIn">
            <summary>
            Defines the Animation effect as FadeZoomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeZoomOut">
            <summary>
            Defines the Animation effect as FadeZoomOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.ZoomIn">
            <summary>
            Defines the Animation effect as ZoomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.ZoomOut">
            <summary>
            Defines the Animation effect as ZoomOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideLeft">
            <summary>
            Defines the Animation effect as SlideLeft.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideRight">
            <summary>
            Defines the Animation effect as SlideRight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftDownIn">
            <summary>
            Defines the Animation effect as FlipLeftDownIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftDownOut">
            <summary>
            Defines the Animation effect as FlipLeftDownOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftUpIn">
            <summary>
            Defines the Animation effect as FlipLeftUpIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftUpOut">
            <summary>
            Defines the Animation effect as FlipLeftUpOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightDownIn">
            <summary>
            Defines the Animation effect as FlipRightDownIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightDownOut">
            <summary>
            Defines the Animation effect as FlipRightDownOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightUpIn">
            <summary>
            Defines the Animation effect as FlipRightUpIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightUpOut">
            <summary>
            Defines the Animation effect as FlipRightUpOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXDownIn">
            <summary>
            Defines the Animation effect as FlipXDownIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXDownOut">
            <summary>
            Defines the Animation effect as FlipXDownOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXUpIn">
            <summary>
            Defines the Animation effect as FlipXUpIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXUpOut">
            <summary>
            Defines the Animation effect as FlipXUpOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYLeftIn">
            <summary>
            Defines the Animation effect as FlipYLeftIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYLeftOut">
            <summary>
            Defines the Animation effect as FlipYLeftOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYRightIn">
            <summary>
            Defines the Animation effect as FlipYRightIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYRightOut">
            <summary>
            Defines the Animation effect as FlipYRightOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideBottomIn">
            <summary>
            Defines the Animation effect as SlideBottomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideBottomOut">
            <summary>
            Defines the Animation effect as SlideBottomOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideDown">
            <summary>
            Defines the Animation effect as SlideDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideUp">
            <summary>
            Defines the Animation effect as SlideUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideLeftOut">
            <summary>
            Defines the Animation effect as SlideLeftOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideRightOut">
            <summary>
            Defines the Animation effect as SlideRightOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideTopIn">
            <summary>
            Defines the Animation effect as SlideTopIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideTopOut">
            <summary>
            Defines the Animation effect as SlideTopOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.None">
            <summary>
            Defines the Animation effect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Theme">
            <summary>
            Defines the theme style of the Syncfusion component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Material">
            <summary>
            Renders the Syncfusion component with material theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Bootstrap">
            <summary>
            Renders the Syncfusion component with bootstrap theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.HighContrastLight">
            <summary>
            Renders the Syncfusion component with high contrast light theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Fabric">
            <summary>
            Renders the Syncfusion component with fabric theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.MaterialDark">
            <summary>
            Renders the Syncfusion component with material dark theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.FabricDark">
            <summary>
            Renders the Syncfusion component with fabric dark theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.HighContrast">
            <summary>
            Renders the Syncfusion component with high contrast theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.BootstrapDark">
            <summary>
            Renders the Syncfusion component with bootstrap dark theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Bootstrap4">
            <summary>
            Renders the Syncfusion component with bootstrap4 theme.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.ISyncfusionStringLocalizer">
            <summary>
            An interface for processing the Syncfusion UI component's Localization. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.ISyncfusionStringLocalizer.GetText(System.String)">
            <summary>
            Return the Localized value from the resource file. 
            </summary>
            <param name="key">Key string to get the localized value.</param>
            <returns>Returns the localized string.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.ISyncfusionStringLocalizer.ResourceManager">
            <summary>
            ResourceManager for processing the resource file parsing.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SfBase">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBase.Sf(Microsoft.JSInterop.IJSRuntime)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.IJSBase">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.IJSBase.#ctor(Microsoft.JSInterop.IJSRuntime)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.IJSBase.EnableRipple(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.IJSBase.EnableRtl(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.IJSBase.IsDevice">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.IJSBase.SetCulture(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.IJSBase.SetCurrencyCode(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.IJSBase.LoadCldrData(System.String[])">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.IJSBase.LoadCldrData(System.Object[])">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.IJSBase.LoadLocaleData(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.IJSBase.LoadLocaleData(System.Object)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.SfBaseComponent">
            <summary>
            A Base Component for all the Syncfusion Blazor UI components to implement the common functionalities.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.Dispose">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.ComponentDispose">
            <summary>
            The virtual method to override the Dispose method at component side
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.OnAfterScriptRendered">
            <summary>
            Notify the component about the required scripts are rendered in the web page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.InvokeScriptRendered">
            <summary>
            Invoke method for ScriptDependencies class to notify script rendered in web page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.InvokeMethod(System.String,System.Object[])">
            <summary>
            Invokes JSInterop for void return type methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.InvokeMethod``1(System.String,System.Boolean,System.Object[])">
            <summary>
            Invokes JSInterop for object return type methods
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.NotifyPropertyChanges``1(System.String,``0,``0)">
            <summary>
            Notify the property value changes and it will be tracked in the PropertyChanges.
            </summary>
            <param name="propertyName">Name of the property needs to be compared</param>
            <param name="publicValue">Public value of the property</param>
            <param name="privateValue">Private value of the property</param>
            <returns>Returns T</returns>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.UpdateObservableEvents``1(System.String,``0,System.Boolean)">
            <summary>
            Wire or unwire observable events to a specific ObservableCollection object
            </summary>
            <param name="propertyName">ObservableCollection property name to track it in PropertyChanges</param>
            <param name="dataValue">A ObservableCollection data object to bind or unbind the events</param>
            <param name="unwire">Set true to unwire observable events to the ObservableCollection object</param>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.ObservableCollectionChanged(System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            INotifyCollectionChanged event handler method to track the changes
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.ObservablePropertyChanged(System.String,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            INotifyPropertyChanged event handler method to track the changes
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.OnObservableChange(System.String,System.Object,System.Boolean)">
            <summary>
            Overridable Method for INotifyCollectionChanged event handler to track the changes
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SyncfusionBlazor">
            <summary>
            A class to add the Syncfusion Blazor service to the service collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazor.AddSyncfusionBlazor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Adds Syncfusion Blazor service to the service collection.
            </summary>
            <param name="DisableScriptManager">Disable the Syncfusion Blazor built-in init interop script.</param>
        </member>
        <member name="T:Syncfusion.Blazor.SyncfusionBlazorService">
            <summary>
            Represents an instance of Syncfusion Blazor service.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsCultureLoaded">
            <summary>
            Specifies the current culture is set to the library for all type of components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsLicenseClosed">
            <summary>
            Specifies the license banner close icon click action triggered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsScriptRendered">
            <summary>
            Specifies the init JSInterop script is loaded, when DisableScriptManager is false.
            Specifies the IsDevice JSInterop call invoked, when DisableScriptManager is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsLicenseRendered">
            <summary>
            Specifies the license component rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsRippleEnabled">
            <summary>
            Specifies the ripple effect enabled in the application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsRtlEnabled">
            <summary>
            Specifies the Rtl mode enabled in the application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsDeviceMode">
            <summary>
            Specifies the application is rendering in device mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.ScriptHashKey">
            <summary>
            Specifies the application is rendering in device mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.LicenseContent">
            <summary>
            Stores the license content in the service.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsFirstResource">
            <summary>
            Specifies the first component rendering in the application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsFirstBaseResource">
            <summary>
            Specifies the first BaseComponent inherited rendering in the application.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.EnableRipple">
            <summary>
            Enable ripple effect to the Syncfusion Blazor components for material design theme.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.EnableRtl(System.Boolean)">
            <summary>
            Enable right-to-left text direction to the Syncfusion Blazor components.
            </summary>
            <param name="enable">Set false to disable right-to-left text direction.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.IsDevice">
            <summary>
            Returns true when the application is running on a mobile or IPad device.
            This method should be called only in the OnAfterRenderAsync life cycle method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.#ctor">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.SetIsDevice(System.Boolean)">
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfButton">
            <summary>
            The Button is a graphical user interface element that triggers an event on its click action.
            It can contain a text, an image, or both.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.ID">
            <exclude/>
            <summary>
            Sets id attribute for button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.ChildContent">
            <summary>
            Sets content for button element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.Content">
            <summary>
            Defines the text content of the button element and it will support only string type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the button element. The Button types, styles, and
            size can be defined by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.Disabled">
            <summary>
            Specifies a value that indicates whether the Button is enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.EnableRtl">
            <summary>
            Enable or disable rendering Button component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the Button that is used to include an icon.
            Buttons can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IconPosition">
            <summary>
            Positions the icon based on the text content in the button and its default value is Left.
            The possible values are:
            - Left: The icon will be positioned to the left of the text content.
            - Right: The icon will be positioned to the right of the text content.
            - Top: The icon will be positioned to the top of the text content.
            - Bottom: The icon will be positioned to the bottom of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IsPrimary">
            <summary>
            Allows the appearance of the button to be enhanced and visually appealing when set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IsToggle">
            <summary>
            Makes the Button toggle, when set to true. When you click it, the state changes from normal to active or viceversa.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.HtmlAttributes">
            <exclude/>
            <summary>
            You can add the additional html attributes such as id, title etc., to the button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.EnableHtmlSanitizer">
            <exclude/>
            <summary>
            Defines whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.EnablePersistence">
            <exclude/>
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.OnClick">
            <summary>
            Triggers when button element is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfButton.FocusIn">
            <summary>
            Sets the focus to button element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfButton.Click">
            <exclude/>
            <summary>
            Clicks the button element and gets focus on it.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.IconPosition">
            <summary>
            Defines the icon position of Button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Left">
            <summary>
            To position icon left to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Right">
            <summary>
            To position icon right to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Top">
            <summary>
            To position icon above the content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Bottom">
            <summary>
            To position icon below the content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfCheckBox`1">
            <summary>
            The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.
            It contains checked, unchecked, and indeterminate states.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Label">
            <summary>
            Defines the caption for the CheckBox, that describes the purpose of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition">
            <summary>
            Positions label before/after the CheckBox.
            The possible values are:
            - Before - The label is positioned to left of the CheckBox.
            - After - The label is positioned to right of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate">
            <summary>
            Specifies a value that indicates whether the CheckBox is in indeterminate state or not.
            When set to true, the CheckBox will be in indeterminate state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.IndeterminateChanged">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState">
            <summary>
            Specifies a value to enable/disable tri state functionality in CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.ValueChange">
            <summary>
            Triggers when the CheckBox state has been changed by user interaction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipEvents">
            <summary>
            Configure handlers to handle the events with the Chip component
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.baseParent">
            <summary>
            Indicates the SfChip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.OnBeforeClick">
            <summary>
            This click event will get triggered once the chip is before click.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.OnClick">
            <summary>
            This click event will get triggered once the chip is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.Created">
            <summary>
            This created event will get triggered once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.Destroyed">
            <summary>
            This created event will get triggered once the component successfuly disposed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.OnDelete">
            <summary>
            This delete event will get triggered before removing the chip.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipItems">
            <summary>
            Configures the collection of chipitem
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItems.BaseParent">
            <summary>
            Indicates the SfChip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItems.ChildContent">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipItems.UpdateChildProperty(Syncfusion.Blazor.Buttons.ChipItem)">
            <summary>
            Updates the Chips property and returns the count.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipItem">
            <summary>
            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Parent">
            <summary>
            Indicates the ChipItems component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.BaseParent">
            <summary>
            Indicates the SfChip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.ChildContent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.CssClass">
            <summary>
            Specifies the custom classes to be added to the chip element used to customize the Chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Enabled">
            <summary>
            Specifies a value that indicates whether the chip component is enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.LeadingIconCss">
            <summary>
            Specifies the leading icon CSS class for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.LeadingIconUrl">
            <summary>
            Specifies the leading icon url for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.LeadingText">
            <summary>
            Specifies the customized text value for the avatar in the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Text">
            <summary>
            Specifies the text content for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.TrailingIconCss">
            <summary>
            Specifies the trailing icon CSS class for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.TrailingIconUrl">
            <summary>
            Specifies the leading icon url for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Value">
            <summary>
            This value property helps to store the chip component values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as title to the each chip element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SelectionType">
            <summary>
            Different selection types that are applicable for the Chip component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.SelectionType.Single">
            <summary>
            Single selection allows to select a single chip from a set of ChipItem/ChipItems.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.SelectionType.Multiple">
            <summary>
            Multiple selection allows to select multipe chips from a set of ChipItem/ChipItems.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.SelectionType.None">
            <summary>
            Selection of chip will be restricted in none type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipEventArgs">
            <summary>
            Interface for Chip Events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Cancel">
            <summary>
            It denotes whether the item can be deleted or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Element">
            <summary>
            It denotes the deleted Item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Index">
            <summary>
            It denotes the deleted item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Selected">
            <summary>
            It denotes whether the clicked item is selected or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Text">
            <summary>
            It denotes the deleted item text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Value">
            <summary>
            It denotes the deleted item value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfChip">
            <summary>
            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.ChildContent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.CssClass">
            <summary>
            Specifies the custom classes to be added to the chip element used to customize the chip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.Chips">
            <summary>
            This chips property helps to render chipitem component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.EnableDelete">
            <summary>
            This enableDelete property helps to enable delete functionality.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.Enabled">
            <summary>
            This enabled property helps to enable/disable chipitem component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.SelectedChips">
            <summary>
            This selectedChips property helps to select chip items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.Selection">
            <summary>
            This selection property enables chip selection type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as title, native events etc., to the wrapper element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.FindChip(System.String)">
            <summary>
            A function that finds chip based on given chip value.
            <param name="chipValue">Value of the chip need to be passed to get the corresponding chip model.</param>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetSelectedChips">
            <summary>
            A function that returns selected chips data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.RemoveChips(System.String[])">
            <summary>
            A function that removes chip items based on given chip values.
            <param name="removableChipValues">Values of the chips which are to be removed should be passed</param>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.SelectChips(System.String[])">
            <summary>
            A function that selects chip items based on given index.
            <param name="selectableChips">Values of the chips which are to be selected should be passed</param>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.AddChip(Syncfusion.Blazor.Buttons.ChipItem)">
            <summary>
            A function that adds chip items based on given input.
            <param name="item">Chip Item to be added should be passed</param>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateChips(System.Collections.Generic.List{Syncfusion.Blazor.Buttons.ChipItem})">
            <summary>
            Updates the child properties of the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.RefeshComponent">
            <summary>
            Re-renders the complete chip component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateAttributes">
            <summary>
            Updates the class and multiselection attributes of the chip root element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetItem(System.String)">
            <summary>
            Returns a ChipItem based on a value of a chip.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateRefsCount(System.Int32)">
            <summary>
            Updates the chip elements count
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetAttributes(System.Int32)">
            <summary>
            Updates the text, icons url/class and attributes of each chip if multiple chip rendered
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateAttributes(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the attributes value
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnDeleteClick(System.Int32,System.Boolean)">
            <summary>
            Delete click event handler
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipMouseDown(System.Int32,System.Boolean)">
            <summary>
            Chip element mouse down event handler
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetActualElementRef(System.Int32[])">
            <summary>
            Return element references based on index values
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipClick(System.Int32,System.Boolean)">
            <summary>
            Chip element click event handler
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetEventArgs(System.Int32)">
            <summary>
            Returns the click event arguments
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipFocusOut">
            <summary>
            Chip element focus out handler
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipFocus(System.Int32)">
            <summary>
            Chip element focus handler
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnKeyDown(System.Int32,Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Chip element key down handler
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.ComponentDispose">
            <summary>
            Component dispose handled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.LabelPosition">
            <summary>
            Defines the label position of component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.LabelPosition.After">
            <summary>
            To position label after the component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.LabelPosition.Before">
            <summary>
            To position label before the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChangeEventArgs`1">
            <summary>
            Arguments for `ValueChange` event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeEventArgs`1.Checked">
            <summary>
            Returns the checked value of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeEventArgs`1.Event">
            <summary>
            Returns the event parameters of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeEventArgs`1.Name">
            <exclude/>
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChangeArgs`1">
            <summary>
            Interface for Radio Button change event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeArgs`1.Value">
            <summary>
            Returns the value of the RadioButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeArgs`1.Event">
            <summary>
            Returns the event parameters of the RadioButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeArgs`1.Name">
            <exclude/>
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.CheckBoxModel`1">
            <summary>
            Interface for a class CheckBox
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Checked">
            <summary>
            Specifies a value that indicates whether the CheckBox is `checked` or not.
            When set to `true`, the CheckBox will be in `checked` state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the CheckBox element.
            You can add custom styles to the CheckBox by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Disabled">
            <summary>
            Specifies a value that indicates whether the CheckBox is `disabled` or not.
            When set to `true`, the CheckBox will be in `disabled` state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as disabled, value etc., to the element.
            If you configured both property and equivalent html attribute then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Indeterminate">
            <summary>
            Specifies a value that indicates whether the CheckBox is in `indeterminate` state or not.
            When set to `true`, the CheckBox will be in `indeterminate` state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Label">
            <summary>
            Defines the caption for the CheckBox, that describes the purpose of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.LabelPosition">
            <summary>
            Positions label `before`/`after` the CheckBox.
            The possible values are:
             Before - The label is positioned to left of the CheckBox.
             After - The label is positioned to right of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Name">
            <summary>
            Defines `name` attribute for the CheckBox.
            It is used to reference form data (CheckBox value) after a form is submitted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Value">
            <summary>
            Defines `value` attribute for the CheckBox.
            It is a form data passed to the server when submitting the form.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfInputBase`1">
            <summary>
            A base class for form input components.    
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.ID">
            <summary>
            Defines id attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.ChildContent">
            <exclude/>
            <summary>
            Defines the caption for the input, that describes the purpose of the input including HTML and its customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the component wrapper element.
            You can add custom styles to the component by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name">
            <summary>
            Defines name attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value">
            <summary>
            Defines value attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked">
            <summary>
            Specifies a value that indicates whether the component is checked or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.CheckedChanged">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.CheckedExpression">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Disabled">
            <summary>
            Specifies a value that indicates whether the component is disabled or not.
            When set to true, the component will be in disabled state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.EnableHtmlSanitizer">
            <exclude/>
            <summary>
            Defines whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Locale">
            <exclude />
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.HtmlAttributes">
            <exclude/>
            <summary>
            You can add the additional html attributes such as title , native events etc., to the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfInputBase`1.FocusIn">
            <summary>
            Sets the focus to component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfInputBase`1.Click">
            <exclude/>
            <summary>
            Clicks the element and gets focus on it.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfRadioButton`1">
            <summary>
            The RadioButton is a graphical user interface element that allows you to select one option from the choices.
            It contains checked and unchecked states.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfRadioButton`1.Label">
            <summary>
            Defines the caption for the RadioButton, that describes the purpose of the RadioButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition">
            <summary>
            Positions label `before`/`after` the RadioButton.
            The possible values are:
            - Before: The label is positioned to left of the RadioButton.
            - After: The label is positioned to right of the RadioButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfRadioButton`1.ValueChange">
            <summary>
            Event trigger when the RadioButton state has been changed by user interaction.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfRadioButton`1.GetSelectedValue">
            <exclude />
            <summary>
            To get the value of selected radio button in a group.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfSwitch`1">
            <summary>
            The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.
            </summary>    
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfSwitch`1.OnLabel">
            <summary>
            Specifies a text that indicates the Switch is in checked state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfSwitch`1.OffLabel">
            <summary>
            Specifies a text that indicates the Switch is in unchecked state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfSwitch`1.ValueChange">
            <summary>
            Triggers when Switch state has been changed by user interaction.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfSwitch`1.Toggle">
            <exclude />
            <summary>
            Toggle the Switch component state into checked/unchecked.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Adaptors">
            <summary>
            Specifies the data adaptors
            <list type="bullet">
            <item>
            <term>BlazorAdaptor</term>
            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>
            </item>
            <item>
            <term>ODataAdaptor</term>
            <description>
            OData Adaptor provies ability to consume and manipulate data from OData services.
            </description>
            </item>
            <item>
            <term>ODataV4Adaptor</term>
            <description>
            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services
            </description>
            </item>
            <item>
            <term>WebApiAdaptor</term>
            <description>
            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.
            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
            </description>
            </item>
            <item>
            <term>UrlAdaptor</term>
            <description>
            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.
            </description>
            </item>
            <item>
            <term>RemoteSaveAdaptor</term>
            <description>
            Remote Save Adaptor is used for binding JSON data. 
            It interacts with remote services only for CRUD operations.
            </description>
            </item>
            <item>
            <term>CustomAdaptor</term>
            <description>
            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component 
            extended from DataAdaptor class.
            </description>
            </item>
            <item>
            <term>JsonAdaptor</term>
            <description>
            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.JsonAdaptor">
            <summary>
            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.BlazorAdaptor">
            <summary>
            BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.ODataAdaptor">
            <summary>
            OData Adaptor provies ability to consume and manipulate data from OData services.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.ODataV4Adaptor">
            <summary>
            OData v4 Adaptor provies ability to consume and manipulate data from OData v4 services.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.UrlAdaptor">
            <summary>
            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.WebApiAdaptor">
            <summary>
            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.
            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.RemoteSaveAdaptor">
            <summary>
            Remote Save Adaptor is used for binding JSON data. 
            It interacts with remote services only for CRUD operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.CustomAdaptor">
            <summary>
            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component 
            extended from DataAdaptor class.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Operator">
            <summary>
            Specifies the operator list used for filtering or searching operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.None">
            <summary>
            No operator is selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.Contains">
            <summary>
            Filter items by contains operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.StartsWith">
            <summary>
            Filter items by starts with operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.EndsWith">
            <summary>
            Filter items by ends with operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.Equal">
            <summary>
            Filter items by equal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.NotEqual">
            <summary>
            Filter items by not-equal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.GreaterThan">
            <summary>
            Filter items by greater than operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.GreaterThanOrEqual">
            <summary>
            Filter items by greater than or equal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.LessThan">
            <summary>
            Filter items by less than operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.LessThanOrEqual">
            <summary>
            Filter items by less than or equal operator.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.IAdaptor">
            <summary>
            Provides the members for data adaptor class
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.GetName">
            <summary>
            Returns the adaptor name.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.SetRunSyncOnce(System.Boolean)">
            <summary>
            Runs the data operation synchronously.
            </summary>
            <param name="runSync">Enables synchronous data operation.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessQuery(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Read query from <see cref="T:Syncfusion.Blazor.Data.Query"/> and make it understandable by 
            data source.
            </summary>
            <param name="queries">Specifies the query</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation response/result from the data source and make it understandable by user end. 
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="Data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessCrudResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the CRUD operation response/result from the data source and make it understandable by user end. 
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="Data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.PerformDataOperation``1(System.Object)">
            <summary>
            Performs data operation. If its a remote data source then make a server request. 
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="queries">Specifies the query.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.IsRemote">
            <summary>
            Returns true if data source is remote service.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.SetModelType(System.Type)">
            <summary>
            To get model type.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation.
            </summary>
            <param name="dataManager">DataManager instance</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Update(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending changed items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Remove(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Handles the remove operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item</param>
            <param name="query">Query instance.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key</param>
            <param name="keyField">Specifies the primary key field</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation in dynamic objects.
            </summary>
            <param name="dataManager">DataManager instance</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Update(Syncfusion.Blazor.DataManager,System.String,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>        
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation for Dynamic objects. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key</param>
            <param name="keyField">Specifies the primary key field</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.AddParams(Syncfusion.Blazor.Data.RequestOptions,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Adds additional paramerters from Query instance to server request.
            </summary>
            <param name="options"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.BeforeSend(System.Net.Http.HttpRequestMessage)">
            <summary>
            Invoked before sending server request
            </summary>
            <param name="request">Specifies the HttpRequestMessage instance</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessBatchResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation batch response/result from the data source and make it understandable by user end. 
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="Data">Specifies the data.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.AdaptorBase">
            <summary>
            Base class for all data adaptors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.AdaptorBase.DataManager">
            <summary>
            Specifies the data manager instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.AdaptorBase.RunSyncOnce">
            <summary>
            When true, runs data operation synchronously. Applicable only for BlazorAdaptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.SetRunSyncOnce(System.Boolean)">
            <summary>
            Runs the data operation synchronously.
            </summary>
            <param name="runSync">Enables synchronous data operation.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.GetName">
            <summary>
            Returns the adaptor name.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.IsRemote">
            <summary>
            Returns true if data source is remote service.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.SetModelType(System.Type)">
            <summary>
            To get model type.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessQuery(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Read query from <see cref="T:Syncfusion.Blazor.Data.Query"/> and make it understandable by 
            data source.
            </summary>
            <param name="queries">Specifies the query</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.PerformDataOperation``1(System.Object)">
            <summary>
            Performs data operation. If its a remote data source then make a server request. 
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="queries">Specifies the query.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation response/result from the data source and make it understandable by user end. 
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="Data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessCrudResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the CRUD operation response/result from the data source and make it understandable by user end. 
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="Data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation.
            </summary>
            <param name="dataManager">DataManager instance</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Update(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Remove(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Handles the remove operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item</param>
            <param name="query">Query instance.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key</param>
            <param name="keyField">Specifies the primary key field</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Insert(Syncfusion.Blazor.DataManager,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation in dynamic objects.
            </summary>
            <param name="dataManager">DataManager instance</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Update(Syncfusion.Blazor.DataManager,System.String,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>        
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.BatchUpdate(Syncfusion.Blazor.DataManager,System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation for Dynamic objects. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key</param>
            <param name="keyField">Specifies the primary key field</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.AddParams(Syncfusion.Blazor.Data.RequestOptions,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Adds additional paramerters from Query instance to server request.
            </summary>
            <param name="options"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.BeforeSend(System.Net.Http.HttpRequestMessage)">
            <summary>
            Invoked before sending server request
            </summary>
            <param name="request">Specifies the HttpRequestMessage instance</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessBatchResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation batch response/result from the data source and make it understandable by user end. 
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="Data">Specifies the data.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.RemoteOptions">
            <summary>
            Defines internal adaptor options.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.From">
            <summary>
            Gets or sets the table name
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.RequestType">
            <summary>
            Gets or sets the request type
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.SortBy">
            <summary>
            Gets or sets the sort field name
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Select">
            <summary>
            Gets or sets the select field name
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Skip">
            <summary>
            Gets or sets the records to skip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Group">
            <summary>
            Gets or sets the group criteria
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Take">
            <summary>
            Gets or sets the records to take.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Search">
            <summary>
            Gets or sets the search string
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Count">
            <summary>
            Gets or sets the count
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Where">
            <summary>
            Gets or sets the filter criteria
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Aggregates">
            <summary>
            Gets or sets the aggregate details
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Expand">
            <summary>
            Gets or sets the navigation table.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Accept">
            <summary>
            Gets or sets the accept type
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.MultipartAccept">
            <summary>
            Gets or sets the multipart type
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Batch">
            <summary>
            Gets or sets the batch value
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.ChangeSet">
            <summary>
            Gets or sets the change set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.BatchPre">
            <summary>
            Gets or sets the batch prefix.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.ContentId">
            <summary>
            Gets or sets the content id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.BatchContent">
            <summary>
            Gets or sets the batch content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.ChangeSetContent">
            <summary>
            Gets or sets the change set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.BatchChangeSetContentType">
            <summary>
            Gets or sets the batch change set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.UpdateType">
            <summary>
            Gets or sets the http update type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.LocalTime">
            <summary>
            Enables local time conversion
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Apply">
            <summary>
            Gets or sets the odatav4 $apply value
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.EnableODataSearchFallback">
            <summary>
            Enable odatav4 search by $filter
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.CRUDModel`1">
            <summary>
            Defines the members of the CRUD arguments send during server request. Use this class to model 
            bind request parameters while using UrlAdaptor.
            </summary>
            <typeparam name="T">Type of the data</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Action">
            <summary>
            Specifies the action initiated the request. Possible values are add, update or remove.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Table">
            <summary>
            Specifies the Table name(if any) to be updated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.KeyColumn">
            <summary>
            Specifies the primary key column name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Key">
            <summary>
            Specifies the Primary key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Value">
            <summary>
            Specifies the modified/added record. For batch operation use Added, Changed and Deleted property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Added">
            <summary>
            Specifies the list of added records while batch editing.
            </summary>
            <remarks>The Added property will holds values on batch editing only</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Changed">
            <summary>
            Specifies the list of updated records while batch editing.
            </summary>
            <remarks>The Changed property will holds values on batch editing only</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Deleted">
            <summary>
            Specifies the list of deleted records while batch editing.
            </summary>
            <remarks>The Deleted property will holds values on batch editing only</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Params">
            <summary>
            Holds the additional parameters passed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Utils">
            <summary>
            Class holds URL and Key for batch operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Utils.Url">
            <summary>
            Specifies the batch url.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Utils.Key">
            <summary>
            Specifies the batch primary key value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.RequestOptions">
            <summary>
            Defines members of the request option for remote data handling.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.Url">
            <summary>
            Specifies the service url.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.BaseUrl">
            <summary>
            Specifies the application base url.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.RequestMethod">
            <summary>
            Specifies the Http request method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.Data">
            <summary>
            Specifies the data to be posted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.Queries">
            <summary>
            Specifies the source query value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.ContentType">
            <summary>
            Specifies the content type. By default, application/json is used.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ApiAdaptor">
            <summary>
            Handles request and response to and from Web API created for ApiController.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.BlazorAdaptor">
            <summary>
            Handles data operation in IEnumerable data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.BlazorAdaptor.DataOperationInvoke``1(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Performs data operation
            </summary>
            <typeparam name="T">Type of the data source item</typeparam>
            <param name="DataSource">Data source value</param>
            <param name="queries">Query to be processed</param>
            <returns>DataResult</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.BlazorAdaptor.CollectChildRecords(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Performs data operation on child records.
            </summary>
            <param name="datasource">Data source value</param>
            <param name="dm">Query to be processed</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataAdaptor">
            <summary>
            Handles request and response to and from OData service.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnPredicate(Syncfusion.Blazor.Data.WhereFilter,Syncfusion.Blazor.DataManagerRequest,System.Boolean)">
            <summary>
            Generates request filter query string from the Query value.
            </summary>
            <param name="filter">Filter criteria</param>
            <param name="query">Query value</param>
            <param name="requiresCast">Performs value cast. Applicable on search operation.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnEachSort(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Returns sort query string based on query.
            </summary>
            <param name="queries">Query value</param>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnEachSearch(Syncfusion.Blazor.Data.SearchFilter)">
            <summary>
            Returns search query string based on query.
            </summary>
            <param name="e">Search query</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnSearch(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Returns search query string based on query.
            </summary>
            <param name="e">List of filter queries</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnSearch(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.Object)">
            <summary>
            Returns search query string based on query.
            </summary>
            <param name="e">List of filter queries.</param>
            <param name="additionParams">Additional parameters</param>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnCount(System.Boolean)">
            <summary>
            Returns count query string based on query.
            </summary>
            <param name="e">Request count value if it is true</param>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnExpand(System.Collections.Generic.List{System.String})">
            <summary>
            Returns expand query string based on query.
            </summary>
            <param name="expands">List of relational table names</param>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnExpand(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Returns expand query string based on query.
            </summary>
            <param name="selects">List of fields to select in relational tables.</param>
            <param name="expands">List of relational table names</param>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnSelect(System.Collections.Generic.List{System.String})">
            <summary>
            Returns select query string based on query.
            </summary>
            <param name="selects">List of field names to select.</param>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnDistinct(System.Collections.Generic.List{System.String})">
            <summary>
            Returns distinct query string based on query.
            </summary>
            <param name="distincts">List of field names.</param>
            <returns>string</returns>
            <remarks>Applicable only for ODataV4 services.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.CheckDate(System.String)">
            <summary>
            Check if given value is a valid date or not.
            </summary>
            <param name="date">Input date string</param>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.PvtOptions">
            <summary>
            Hold private options.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.OData`1">
            <summary>
            Schema for OData service response.
            </summary>
            <typeparam name="T">Type of the model</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataNoCount`1">
            <summary>
            Schema for OData service response with no count.
            </summary>
            <typeparam name="T">Type of the model</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.RemoteArgs">
            <summary>
            Remote arguments.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.CrudResponse`1">
            <summary>
            Schema for CRUD OData service response.
            </summary>
            <typeparam name="T">Type of the model</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataV4Adaptor">
            <summary>
            Handles request and response to and from ODataV4 service.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataV4`1">
            <summary>
            Schema for ODataV4 service response.
            </summary>
            <typeparam name="T">Type of the model</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.UrlAdaptor">
            <summary>
            Handles request and response to and from any remote service.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.UrlResult`1">
            <summary>
            Schema for URL service response.
            </summary>
            <typeparam name="T">Type of the model</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.WebApiAdaptor">
            <summary>
            Handles request and response to and from Web API controller.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Sort">
            <summary>
            Defines the sort descriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Sort.Name">
            <summary>
            Gets the field name
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Sort.Direction">
            <summary>
            Gets the sort direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SearchFilter">
            <summary>
            Defines members for creating search criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.Fields">
            <summary>
            Collection of fields to search
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.Key">
            <summary>
            Specifies the search key
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.Operator">
            <summary>
            Specifies the search operator. By default, contains operator will be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.IgnoreCase">
            <summary>
            Specifies that incasesensitive search to be done.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Aggregate">
            <summary>
            Defines the members of the aggregate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Aggregate.Field">
            <summary>
            Specifies the field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Aggregate.Type">
            <summary>
            Specifies the aggregate type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.WhereFilter">
            <summary>
            Defines the members to build filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.Field">
            <summary>
            Specifies the field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.IgnoreCase">
            <summary>
            Specifies that filter should be incasesensitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.IgnoreAccent">
            <summary>
            Specifies that ignore accent/diacritic letters while searching.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.IsComplex">
            <summary>
            When true it specifies that the filter criteria is a complex one.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.Operator">
            <summary>
            Gets the filter operator
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.Condition">
            <summary>
            Provides the complex filter merge condition.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.value">
            <summary>
            Specifies the filter value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.predicates">
            <summary>
            Specifies the collection filter criteria.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.And(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Merge the give collection of predicates using And condition
            </summary>
            <param name="predicates">List of predicates</param>
            <returns>WhereFilter</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.Or(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Merge the give collection of predicates using Or condition
            </summary>
            <param name="predicates">List of predicates</param>
            <returns>WhereFilter</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.And(System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Merge the give predicate using And condition
            </summary>
            <param name="fieldName">Specifies the field name.</param>
            <param name="operator">Specifies the filter operator</param>
            <param name="value">Specifies the filter value</param>
            <param name="ignoreCase">Performs incasesensitive filtering</param>
            <param name="ignoreAccent">Ignores accent/diacritic letters while filtering.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.And(Syncfusion.Blazor.Data.WhereFilter)">
            <summary>
            Merge the give predicate using And condition
            </summary>
            <param name="predicate">Predicate to be merged</param>
            <returns>WhereFilter</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.Or(System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Merge the give predicate using Or condition
            </summary>
            <param name="fieldName">Specifies the field name.</param>
            <param name="operator">Specifies the filter operator</param>
            <param name="value">Specifies the filter value</param>
            <param name="ignoreCase">Performs incasesensitive filtering</param>
            <param name="ignoreAccent">Ignores accent/diacritic letters while filtering.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.Or(Syncfusion.Blazor.Data.WhereFilter)">
            <summary>
            Merge the give predicate using Or condition
            </summary>
            <param name="predicate">Predicate to be merged</param>
            <returns>WhereFilter</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DefaultAdaptor">
            <summary>
            Provide adaptor information which sends to client side.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataResult">
            <summary>
            Defines the members of the data manager operation result.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataResult`1">
            <summary>
            Defines the members of the data manager operation result.
            </summary>
            <typeparam name="T">Type of the data source element.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.Result">
            <summary>
            Gets the result of the data operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.Count">
            <summary>
            Gets the total count of the records in data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.Aggregates">
            <summary>
            Gets the aggregate result based on the aggregate query.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.FilteredRecords">
            <summary>
            Gets the filtered records
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.BaseAdaptor">
            <summary>
            Handles custom adaptor logic.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Group`1">
            <summary>
            Defines the members of the grouped record.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.GroupGuid">
            <summary>
            Unique identifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Level">
            <summary>
            Specifies the level of this group
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.ChildLevels">
            <summary>
            Specifies the count of child if any.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Records">
            <summary>
            Specifies the ungrouped records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Key">
            <summary>
            Specifies the group key value
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.CountItems">
            <summary>
            Specifies the count of items in this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Items">
            <summary>
            Specifies the items of the group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Aggregates">
            <summary>
            Specifies the aggregates of this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Field">
            <summary>
            Specifies the field value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.HeaderText">
            <summary>
            Specifies the header text of the field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.ForeignKey">
            <summary>
            Specifies the foreign key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Result">
            <summary>
            Specifies the result.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.IDataAdaptor">
            <summary>
            Interface for Data adaptors.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Read(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.ReadAsync(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.InsertAsync(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Remove(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.RemoveAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation asynchronously..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Update(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.UpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.BatchUpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations asynchronously.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataManagerTypeConverter">
            <summary>
            Handles the datamanager converter.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataUtil">
            <summary>
            Provides utility method used by data manager.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetUrl(System.String,System.String,System.String)">
            <summary>
            Resolves the given base url and relative url to generate absolute url. And merge query string if any.
            </summary>
            <param name="baseUrl">Base address url</param>
            <param name="relativeUrl">Relative url</param>
            <param name="queryParams">Query string</param>
            <returns>string - absolute url.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetKeyValue(System.String,System.Object)">
            <summary>
            Gets the property value with the given key.
            </summary>
            <param name="key">Property name.</param>
            <param name="value">Source object</param>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.ToQueryParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts dictionary of key/value pair to query string.
            </summary>
            <param name="Params">Input dictionary value</param>
            <returns>string - Query string</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Blazor.Data.DataUtil.GetDistinct``1(System.Collections.Generic.IEnumerable{``0},System.String)" -->
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetValue(System.Int32,System.Object)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.Group``1(System.Collections.IEnumerable,System.String,System.Collections.Generic.List{Syncfusion.Blazor.Data.Aggregate},System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Groups the given data source with the field name.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <param name="jsonArray">Input data source</param>
            <param name="field">Specifies the group by field name.</param>
            <param name="aggregates">Aggregate details to aggregate grouped records.</param>
            <param name="level">Level of the group. For parent group it is 0</param>
            <param name="format">Specifies the format and handler method to perform group by format.</param>
            <returns>IEnumerable - Grouped record.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.PerformAggregation(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Aggregate})">
            <summary>
            Performs aggregation on the given data source.
            </summary>
            <param name="jsonData">Input data source</param>
            <param name="aggregates">List of aggregate to be calculated.</param>
            <returns>Dictionary of aggregate results.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetVal(System.Collections.IEnumerable,System.Int32,System.String)">
            <summary>
            Gets the property value from list of object. 
            </summary>
            <param name="jsonData">List of object</param>
            <param name="index">Index of the item to be processed</param>
            <param name="field">Property name to get value.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetObject(System.String,System.Object)">
            <summary>
            Gets the property value from object.
            </summary>
            <param name="nameSpace">Property name to be accessed.</param>
            <param name="from">Source object</param>
            <returns>object - property value.</returns>
            <remarks>For accessing complex/nested property value, given the nameSpace with field names delimited by dot(.).</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetFormattedValue(System.Object,System.String)">
            <summary>
            Formats the given value.
            </summary>
            <param name="value">Value to be formatted</param>
            <param name="format">Format string</param>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetDynamicValue(System.Dynamic.DynamicObject,System.String)">
            <summary>
            Gets the property value from the DynamicObject.
            </summary>
            <param name="obj">Input dynamic object.</param>
            <param name="name">Property name to get.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetExpandoValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Gets the property value from the ExpandoObject.
            </summary>
            <param name="obj">Input Expando object.</param>
            <param name="name">Property name to get.</param>
            <returns>object</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataMemberBinder">
            <summary>
            Defines the data member binder for setting dynamic object property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DynamicQueryableExtensions">
            <summary>
            Provides extension methods for Queryable source. 
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable(); </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as, </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DynamicQueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Blazor.Data.FilterType,Syncfusion.Blazor.Data.FilterBehavior,System.Boolean,System.Type,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression. 
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source">Data source</param>
            <param name="paramExpression">Parameter expression to merge.</param>
            <param name="propertyName">Property name to be filtered.</param>
            <param name="constValue">Const value</param>
            <param name="filterType">Filter operator type</param>
            <param name="filterBehaviour">Specifies the filter behavior</param>
            <param name="isCaseSensitive">Performs the case sensitive if true.</param>
            <param name="sourceType">Specifies the data source element type.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Data.EnumerableExtensions">
            <summary>
            Provides enumerable extension.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.EnumerableOperation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.EnumerableOperation.condition">
            <summary>
            Handles data operation for IEnumerable type data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.Execute(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed</param>
            <param name="manager">Query to be executed.</param>
            <returns>IEnumerable - resultant records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformGrouping(System.Collections.IEnumerable,System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PredicateBuilder(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String,System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates predicate with the given filter criteria.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Value can be either AND or OR</param>
            <param name="paramExpression">Parameter expression</param>
            <param name="type">Specifies the source type.</param>
            <returns>Expression</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformFiltering(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR</param>
            <returns>IEnumerable - filtered records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSearching(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.GetDataType(System.Collections.IEnumerable,System.Type,System.String)">
            <summary>
            Returns data type.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.GetColumnType(System.Collections.IEnumerable,System.String,System.Type)">
            <summary>
            Returns column type.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSkip(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="skip">Number of records to be skipped.</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformTake(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="take">Number of records to be taken.</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.IHttpHandler">
            <summary>
            Interface for http handler used by data manager.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.HttpHandlerBase">
            <summary>
            Bas class for http handler used by data manager.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.HttpHandler">
            <summary>
            Handles HttpClient instance creation. Also build and sends HttpMessages request. 
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.HttpMessageContent">
            <summary>
            Derived HttpMessageContent class to prepare or modify the multipart type requests.
            Reference from the https://github.com/aspnet/AspNetWebStack/blob/master/src/System.Net.Http.Formatting/HttpMessageContent.cs to prepare a HttpContent extension.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.FilterType">
            <summary>
            Specifies the FilterType to be used in LINQ methods.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.LessThan">
            <summary>
            Performs LessThan operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.LessThanOrEqual">
            <summary>
            Performs LessThan Or Equal operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Equals">
            <summary>
            Checks Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.NotEquals">
            <summary>
            Checks for Not Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.GreaterThanOrEqual">
            <summary>
            Checks for Greater Than or Equal on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.GreaterThan">
            <summary>
            Checks for Greater Than on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.StartsWith">
            <summary>
            Checks for StartsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.EndsWith">
            <summary>
            Checks for EndsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Contains">
            <summary>
            Checks for Contains on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Undefined">
            <summary>
            Returns invalid type
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Between">
            <summary>
            Checks for Between two date on the operands.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.FilterBehavior">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterBehavior.StronglyTyped">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterBehavior.StringTyped">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ColumnFilter">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ColumnFilter.Value">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ColumnFilter.DisplayText">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortColumn">
            <summary>
            Defines the sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortColumn.ColumnName">
            <summary>
            Specifies the column name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortColumn.SortDirection">
            <summary>
            Specifies the sort direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DynamicClass">
            <summary>
            Defines the dynamic class
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DynamicProperty">
            <summary>
            Specifies the dynamic property.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.GroupContext">
            <summary>
            Defines the group context class.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ListSortDirection">
            <summary>
             Specifies the direction of a sort operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ListSortDirection.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ListSortDirection.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortOrder">
            <summary>
            Sepcifies the sort order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.SortOrder.None">
            <summary>
            No sort order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.SortOrder.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.SortOrder.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortedColumn">
            <summary>
            Defines the sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortedColumn.Field">
            <summary>
            Specifies the field to sort.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortedColumn.Direction">
            <summary>
            Specifies the sort order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.NullableHelperInternal">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.IsComplexType(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="t">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.NullableHelperInternal.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.Blazor.Data.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Data.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Blazor.Data.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. 
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.TryConvertFromBase64String(System.Type,System.String,System.Object@)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a byte array from a base64 string.
            </summary>
            <param name="type"></param>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Query">
            <summary>
            Provides methods to generate query which can be executed against data source using <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/>.
            </summary>
            <remarks>Methods in this class are chainable.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Queries">
            <summary>
            Provides various method that allow user to generate query. 
            These queries is used by <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> to process given data source and returns resultant records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Key">
            <summary>
            Specifies the primary key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.FKey">
            <summary>
            Specifies the foreign key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.FromTable">
            <summary>
            Specifies the table name.
            </summary>
            <remarks>Table name is used by the remote adaptors.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Lookups">
            <summary>
            Specifies the lookup table names.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Expands">
            <summary>
            Specifies the relation table/resource names.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.SortedColumns">
            <summary>
            Gets the sort column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.GroupedColumns">
            <summary>
            Gets the group column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.SubQuerySelector">
            <summary>
            Specifies the sub query details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.SubQuery">
            <summary>
            Specifies the sub query.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.IsChild">
            <summary>
            Specifies the presence of child.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Params">
            <summary>
            Gets the additional parameters to be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.IsCountRequired">
            <summary>
            Specifies that count value is required in responses from remote services.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.DataManager">
            <summary>
            Gets the data manager instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Distincts">
            <summary>
            Gets the list of distinct values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.IdMapping">
            <summary>
            Gets the id mapping value used for child data source process.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.From(System.String)">
            <summary>
            Adds the table or resource name.
            </summary>
            <param name="tableName">Table name</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Page(System.Int32,System.Int32)">
            <summary>
            Sets the current page index and page size.
            </summary>
            <param name="pageIndex">Specifies the current page.</param>
            <param name="pageSize">Specifies the page size</param>
            <returns>Query</returns>
            <remarks>Use this method to get chunk of records from the given data source.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Take(System.Int32)">
            <summary>
            Sets the take index.
            </summary>
            <param name="pageSize">Maximum index of the record</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Skip(System.Int32,System.Int32)">
            <summary>
            Sets the current page index and page size.
            </summary>
            <param name="pageIndex">Specifies the current page.</param>
            <param name="pageSize">Specifies the page size</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Skip(System.Int32)">
            <summary>
            Sets the skip index.
            </summary>
            <param name="skip">Number of records to skip.</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Range(System.Int32,System.Int32)">
            <summary>
            Gets the range of records.
            </summary>
            <param name="start">Range start index.</param>
            <param name="end">Range end index.</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Select(System.Collections.Generic.List{System.String})">
            <summary>
            Selects the given fields from data source.
            </summary>
            <param name="fieldNames">List of fields to select.</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Where(System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Filters the records with the given query.
            </summary>
            <param name="fieldName">Specifies the field name.</param>
            <param name="operator">Specifies the operator.</param>
            <param name="value">Specifies the filter value.</param>
            <param name="ignoreCase">Performs case sensitive filter</param>
            <param name="ignoreAccent">Ignore accents/diacritic words during filtering.</param>
            <returns>Query</returns>
            <remarks>Multiple Where method can be chained to create complex filter criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Where(Syncfusion.Blazor.Data.WhereFilter)">
            <summary>
            Filters the records with the given query.
            </summary>
            <param name="predicate">Specifies the predicate to be used.</param>
            <returns>Query</returns>
            <remarks>Multiple Where method can be chained to create complex filter criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Where(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Filters the records with the given query.
            </summary>
            <param name="predicate">Specifies the list of predicates to be used.</param>
            <returns>Query</returns>
            <remarks>Multiple Where method can be chained to create complex filter criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Search(System.String,System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches the records with the given query.
            </summary>
            <param name="searchKey">Specifies the search key</param>
            <param name="fieldNames">Specifies the field names.</param>
            <param name="operator">Specifies the search operator.</param>
            <param name="ignoreCase">Performs case sensitive search</param>
            <param name="ignoreAccent">Ignore accents/diacritic words during searching.</param>
            <returns></returns>
            <remarks>Multiple Search method can be chained to create complex search criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.RequiresCount">
            <summary>
            Specifies that count is expected in remote service response.
            </summary>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Sort(System.String,System.String)">
            <summary>
            Sorts the data source.
            </summary>
            <param name="name">Specifies the sort name.</param>
            <param name="direction">Specifies the sort direction</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Group(System.Collections.Generic.List{System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Groups the data source
            </summary>
            <param name="fieldNames">Specifies the column names to group</param>
            <param name="groupFormat">Specifies the group format</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Group(System.String)">
            <summary>
            Groups the data source
            </summary>
            <param name="fieldName">Specifies the column name</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Group(System.String,System.String)">
            <summary>
            Groups the data source.
            </summary>
            <param name="fieldName">Specifies the column name.</param>
            <param name="columnFormat">Specifies the column format.</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Aggregates(System.String,System.String)">
            <summary>
            Performs the aggregate operation in the aggregate type
            </summary>
            <param name="field">Specifies the field name</param>
            <param name="type">Specifies the aggregate type</param>
            <returns>Query</returns>
            <remarks>Multiple aggregation can be performed by chaining Aggregates method.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.AddParams(System.String,System.Object)">
            <summary>
            Adds additional parameters to the HTTP request sent by <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/>.
            </summary>
            <param name="key">Key value</param>
            <param name="value">Additional parameter value</param>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Distinct(System.Collections.Generic.List{System.String})">
            <summary>
            Gets the distinct records of the given field from the data source
            </summary>
            <param name="fieldNames">List of field names</param>
            <returns>Query</returns>
            <remarks>Applicable only for ODataV4Adaptor.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Expand(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the relational tables to be eager loaded.
            </summary>
            <param name="fieldNames">List of relational table names.</param>
            <returns>Query</returns>
            <remarks>Given table names should be eager loaded. Lazy loading is not supported.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Clone">
            <summary>
            Performs deep cloning of the given Query.
            </summary>
            <returns>Query</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.IsEqual(Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.Data.Query)">
            <summary>
            Compares given Query instance by value.
            </summary>
            <param name="source">Source Query instance.</param>
            <param name="destination">Destination Query instance.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.QueryConverter">
            <summary>
            Converts Query class to and from string respectively.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.QueryableExtensions">
            <summary>
            Provides extension methods for Queryable source. 
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable(); </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as, </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.AndPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an AND binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderBy query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderBy(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetLambdaWithComplexPropertyNullCheck(System.Collections.IEnumerable,System.String,System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates lambda expression for the complex properties
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="paramExpression"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderByDescending query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderByDescending(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetValueExpression(System.Linq.Expressions.ParameterExpression,System.String,System.Type)">
            <summary>
            Generate expression from simple and complex property
            </summary>        
            <param name="propertyName"></param>
            <param name="sourceType"></param>
            <param name="paramExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OR binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Parameter(System.Linq.IQueryable)">
            <summary>
            Creates a ParameterExpression that is required when building a series of
            predicates for the WHERE filter.
            <para></para>
            <code lang="C#">        DataClasses1DataContext db = new
            DataClasses1DataContext();
                    var orders = db.Orders.Skip(0).Take(100).ToList();
                    var queryable = orders.AsQueryable();
                    var parameter =
            queryable.Parameter();</code>
            <para></para>
            <para></para>Use this same parameter passed to generate different predicates and
            finally to generate the Lambda.
            </summary>
            <remarks>
            If we specify a parameter for every predicate, then the Lambda expression scope
            will be out of the WHERE query that gets generated.
            </remarks>
            <param name="source"></param>        
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Blazor.Data.FilterType,Syncfusion.Blazor.Data.FilterBehavior,System.Boolean,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression. 
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="propertyName"></param>
            <param name="constValue"></param>
            <param name="filterType"></param>
            <param name="filterBehaviour"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single property value.
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType">Type</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Select``1(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single and multiple property value.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType">Type</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a SKIP expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType">Type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetDelegateInvokeExpressionAggregateFunc``1(System.Linq.Expressions.ParameterExpression,System.String,System.Delegate)">
            <summary>
            Use this method with a cached delegate, this improves performance when using complex Expressions.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="paramExp"></param>
            <param name="propertyName"></param>
            <param name="expressionFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetQueryableSumMethod(System.Type)">
            <summary>
            Get the exact Sum method from Queryable based on body type.
            </summary>        
            <param name="bodyType"></param>
            <returns>exact method info</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetQueryableAverageMethod(System.Type)">
            <summary>
            Get the exact Average method from Queryable based on body type
            </summary>        
            <param name="bodyType"></param>
            <returns>exact method info</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a TAKE expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType">Type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenBy query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenBy(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenByDescending query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenByDescending(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.Blazor.Data.FilterType,System.Boolean,System.Type)">
            <summary>
            Generates the where expression.
            <para></para>
            <code lang="C#">            var nw = new Northwind(@&quot;Data Source =
            Northwind.sdf&quot;);
                        IQueryable queryable = nw.Orders.AsQueryable();
                        var filters = queryable.Where(&quot;ShipCountry&quot;,
            &quot;z&quot;, FilterType.Contains);
                        foreach (Orders item in filters)
                        {
                            Console.WriteLine(&quot;{0}/{1}&quot;, item.OrderID,
            item.ShipCountry);
                        }</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName">Name of the property.</param>
            <param name="value"></param>
            <param name="filterType"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Use this function to generate WHERE expression based on Predicates. The
            AndPredicate and OrPredicate should be used in combination to build the
            predicate expression which is finally passed on to this function for creating a
            Lambda. 
            <para></para>
            <para></para>
            <para></para>DataClasses1DataContext db = new DataClasses1DataContext();
            <para></para>            var orders = db.Orders.Skip(0).Take(100).ToList();
            <para></para>            var queryable = orders.AsQueryable();
            <para></para>            var parameter =
            queryable.Parameter(&quot;ShipCountry&quot;);
            <para></para>            var binaryExp = queryable.Predicate(parameter,
            <para></para>&quot;ShipCountry&quot;, &quot;USA&quot;, true);
            <para></para>            var filteredOrders = queryable.Where(parameter,
            binaryExp);
            <para></para>            foreach (var order in filteredOrders)
            <para></para>            {
            <para></para>                Console.WriteLine(order);
            <para></para>            }
            <para></para>
            <para></para>
            <para></para>Build Predicates for Contains / StartsWith / EndsWith,
            <para></para>
            <para></para>            IQueryable queryable = nw.Orders.AsQueryable();
            <para></para>            var parameter = queryable.Parameter();
            <para></para>            var exp1 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;h&quot;, FilterType.Contains);
            <para></para>            var exp2 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;a&quot;, FilterType.StartsWith);
            <para></para>            var andExp = exp2.OrPredicate(exp1);
            <para></para>            var filters = queryable.Where(parameter, andExp);
            <para></para>            foreach (Orders item in filters)
            <para></para>            {
            <para></para>                Console.WriteLine(&quot;{0}/{1}&quot;,
            item.OrderID, item.ShipCountry);
            <para></para>            }
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="predicateExpression"></param>
        </member>
        <member name="T:Syncfusion.Blazor.Data.QueryableOperation">
            <summary>
            DataOperation class that performs data operation in IQueryable type data sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.Execute``1(System.Linq.IQueryable{``0},Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed</param>
            <param name="manager">Query to be executed.</param>
            <returns>IQueryable - resultant records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformGrouping``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <returns>IQueryable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IQueryable - sorted records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IQueryable - sorted records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSkip``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="skip">Number of records to be skipped.</param>
            <returns>IQueryable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformTake``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="take">Number of records to be taken.</param>
            <returns>IQueryable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSearching``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IQueryable - searched records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformFiltering``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR</param>
            <returns>IQueryable - filtered records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSelect(System.Linq.IQueryable,System.Collections.Generic.List{System.String})">
            <summary>
            Selects the fields from data source.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="select">Fields to select.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSelect``1(System.Linq.IQueryable,System.Collections.Generic.List{System.String})">
            <summary>
            Selects the fields from data source.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <param name="dataSource">Input data source</param>
            <param name="select">Fields to select.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortDescription">
            <summary>
             Defines the direction and the property name to be used as the criteria for
             sorting a collection.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.#ctor(System.String,Syncfusion.Blazor.Data.ListSortDirection)">
            <summary>
            Initializes a new instance of the System.ComponentModel.SortDescription structure.
            </summary>
            <param name="propertyName">The name of the property to sort the list by.</param>
            <param name="direction">The sort order</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.op_Inequality(Syncfusion.Blazor.Data.SortDescription,Syncfusion.Blazor.Data.SortDescription)">
            <summary>
            Compares two System.ComponentModel.SortDescription objects for value inequality.
            </summary>
            <param name="sd1">The first instance to compare.</param>
            <param name="sd2">The second instance to compare.</param>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.op_Equality(Syncfusion.Blazor.Data.SortDescription,Syncfusion.Blazor.Data.SortDescription)">
            <summary>
            Compares two System.ComponentModel.SortDescription objects for value equality.
            </summary>
            <param name="sd1">The first instance to compare.</param>
            <param name="sd2">The second instance to compare.</param>
            <returns>true</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortDescription.Direction">
            <summary>
            Gets or sets a value that indicates whether to sort in ascending or descending
                order.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortDescription.PropertyName">
            <summary>
            Gets or sets the property name being used as the sorting criteria.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.Equals(System.Object)">
            <summary>
            Compares the specified instance and the current instance of System.ComponentModel.SortDescription
                for value equality.
            </summary>
            <param name="obj">The System.ComponentModel.SortDescription instance to compare.</param>
            <returns>true</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>int</returns>
        </member>
        <member name="T:Syncfusion.Blazor.BaseComponent">
            <summary>
            A Base Component for all the Syncfusion Blazor UI components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.LocaleText">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.ID">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.IsRendered">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.ModelType">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.DataManager">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.TemplateClientChanges">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.UniqueId">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.DataContainer">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.DataHashTable">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.OnInitRenderAsync">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.DataBind(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Trigger(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.UpdateModel(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.ErrorHandling(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.DataProcess(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Insert(System.String,System.String,System.Int32,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Update(System.String,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Remove(System.String,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.BatchUpdate(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.UpdateTemplate(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DataManager">
            <summary>
            The DataManager is a data management component used for performing data operations in applications. 
            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.ServiceProvider">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.BaseAdaptor">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Url">
            <summary>
            Specifies the endpoint URL. DataManager requests this URL when data is needed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.AdaptorInstance">
            <summary>
            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class. 
            </summary>
            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance. 
            Injecting services into custom adaptor class, is not supported while using this approach. 
            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Adaptor">
            <summary>
            Gets or sets the data adaptor to be used by DataManager.
            <list type="bullet">
            <item>
            <term>BlazorAdaptor</term>
            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>
            </item>
            <item>
            <term>ODataAdaptor</term>
            <description>
            OData Adaptor provies ability to consume and manipulate data from OData services.
            </description>
            </item>
            <item>
            <term>ODataV4Adaptor</term>
            <description>
            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services
            </description>
            </item>
            <item>
            <term>WebApiAdaptor</term>
            <description>
            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.
            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
            </description>
            </item>
            <item>
            <term>UrlAdaptor</term>
            <description>
            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.
            </description>
            </item>
            <item>
            <term>RemoteSaveAdaptor</term>
            <description>
            Remote Save Adaptor is used for binding JSON data. 
            It interacts with remote services only for CRUD operations.
            </description>
            </item>
            <item>
            <term>CustomAdaptor</term>
            <description>
            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component 
            extended from DataAdaptor class.
            </description>
            </item>
            <item>
            <term>JsonAdaptor</term>
            <description>
            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.DataAdaptor">
            <summary>
            Holds adaptor instance.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.DotNetObjectRef">
            <summary>
            Holds dotnet instance.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.InsertUrl">
            <summary>
            Specifies the insert URL. 
            </summary>
            <remarks>Applicable for remote adaptors. 
            When Insert method is called, request will be made to InsertUrl. 
            If InsertUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.RemoveUrl">
            <summary>
            Specifies the remove URL. 
            </summary>
            <remarks>Applicable for remote adaptors. 
            When Remove method is called, request will be made to RemoveUrl. 
            If RemoveUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.UpdateUrl">
            <summary>
            Specifies the update URL. 
            </summary>
            <remarks>Applicable for remote adaptors. 
            When Update method is called, request will be made to UpdateUrl. 
            If UpdateUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.CrudUrl">
            <summary>
            Specifies the CRUD URL. 
            </summary>
            <remarks>Applicable for remote adaptors. 
            When Insert, Remove or Update method is called, request will be made to CrudUrl. 
            If CrudUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.BatchUrl">
            <summary>
            Specifies the batch url. 
            </summary>
            <remarks>Applicable for remote adaptors. 
            When SaveChanges method is called, request will be made to BatchUrl. 
            If BatchUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Json">
            <summary>
            Specifies the IEnumerable collection. This data could be queried and manipulated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Headers">
            <summary>
            Specifies the key/value pair of headers.
            </summary>
            <remarks>
            Use Headers to add any custom headers to the request made by DataManager.
            Users can also send authentication bearer token using Headers property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Accept">
            <summary>
            Specifies the accept type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Data">
            <summary>
            Specifies the IEnumerale data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.TimeTillExpiration">
            <summary>
            Specifies the time limit to clear the cached data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.CachingPageSize">
            <summary>
            Specifies the caching page size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.EnableCaching">
            <summary>
            Enables data caching.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.RequestType">
            <summary>
            Specifies the request type for sending data fetching.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Key">
            <summary>
            Specifies the primary key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.CrossDomain">
            <summary>
            When true, then indicates that the request is a cross-domain request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Jsonp">
            <summary>
            Specifies the jsonp request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.DataType">
            <summary>
            Specifies the data type. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Offline">
            <summary>
            Enables offline mode in datamanager.
            </summary>
            <remarks>
            Applicable for remote data source. If offline is true then initial request will be made to fetch 
            data. Further actions will be handled at the in-memory data and no more request will be made to the service.
            Cached data is stored in the JSON property. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.RequiresFormat">
            <summary>
            Sepcifies requires format
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager._Guid">
            <summary>
            unique identifier
            </summary>
            <exclude/>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Blazor.DataManager.Parent" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Blazor.DataManager.BaseParent" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Blazor.DataManager.ChildContent" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Blazor.DataManager.UriHelper" -->
        <member name="P:Syncfusion.Blazor.DataManager.BaseUri">
            <summary>
            Gets the Base URL.
            </summary>
            <remarks>BaseUri will be used to get absolute of Url, InsertUrl, UpdateUrl and RemoveUrl properties</remarks>
        </member>
        <member name="F:Syncfusion.Blazor.DataManager.HttpHandler">
            <summary>
            Specifies the http client handler.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ShouldSerializeJson">
            <summary>
            If returns true, Json property will be serialized. 
            </summary>
            <returns>bool</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ExecuteQuery``1(Syncfusion.Blazor.Data.Query)">
            <summary>
            Executes given query and returns resultant data.
            </summary>
            <typeparam name="T">Type of the model class</typeparam>
            <param name="query">Query class which will be executed against data source.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ExecuteQuery``1(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes given query and returns resultant data.
            </summary>
            <typeparam name="T">Type of the model class</typeparam>
            <param name="query">Query class which will be executed against data source.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.BeforeSend(System.Net.Http.HttpRequestMessage)">
            <summary>
            Invoked before sending http request.
            </summary>
            <param name="request">HttpRequestMessage instance</param>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Insert``1(System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Performs the new item add operation.
            </summary>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance</param>
            <param name="position">Position to insert the new item.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Update``1(System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Performs the update operation.
            </summary>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending changed items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Remove``1(System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Performs the remove operation.
            </summary>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item</param>
            <param name="query">Query instance.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.SaveChanges``1(System.Object,System.Object,System.Object,System.String,System.Nullable{System.Int32},System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Performs the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="keyField">Specifies the primary key field</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="tableName">Table name of the update item</param>
            <param name="query">Query class instance</param>
            <param name="Original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Dispose">
            <summary>
            Handles component dispose.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DataManagerRequest">
            <summary>
            Defines the members of the query.
            </summary>
            <remarks>DataManagerRequest is used to model bind posted data at server side.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Skip">
            <summary>
            Specifies the records to skip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Take">
            <summary>
            Specifies the records to take.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.antiForgery">
            <summary>
            Specifies the anti-forgery key.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.RequiresCounts">
            <summary>
            Sepcifies that the count is required in response.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Table">
            <summary>
            Specifies the table name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.IdMapping">
            <summary>
            Specifies the parent id mapping value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Group">
            <summary>
            Specifies the grouped column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Select">
            <summary>
            Specifies the select column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Expand">
            <summary>
            Specifies the relational table names to be eagerloaded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Sorted">
            <summary>
            Speccifies the sort criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Search">
            <summary>
            Specifies the search criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Where">
            <summary>
            Specifies the filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Aggregates">
            <summary>
            Specifies the aggregate details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Params">
            <summary>
            Specifies additional parameters.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Distinct">
            <summary>
            Specifies the field names to find distinct values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.GroupByFormatter">
            <summary>
            Holds field and format method to handle group by format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.ServerSideGroup">
            <summary>
            Specifies that perform in-built grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.RequiresFilteredRecords">
            <summary>
            Sepcifies that the filtered records is required in response.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DataAdaptor">
            <summary>
            Abstract class for Data adaptors.
            </summary>
            <remarks>
            Extend DataAdaptor component while creating custom adaptor component. DataAdaptor component is extended from 
            <see cref="T:Microsoft.AspNetCore.Components.OwningComponentBase"></see> so that 
            services can be accessed from <see cref="P:Microsoft.AspNetCore.Components.OwningComponentBase.ScopedServices"/> property. 
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Read(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.ReadAsync(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.InsertAsync(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Remove(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.RemoveAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation asynchronously..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Update(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.UpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.BatchUpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations asynchronously.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DataAdaptor`1">
            <summary>
            Abstract class for Data adaptors.
            </summary>
            <remarks>
            Extend DataAdaptor{T} component while creating custom adaptor component. DataAdaptor{T} component is extended from 
            <see cref="T:Microsoft.AspNetCore.Components.OwningComponentBase`1"></see> so that 
            services can be accessed from <see cref="P:Microsoft.AspNetCore.Components.OwningComponentBase`1.Service"/> property. 
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Read(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.ReadAsync(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.InsertAsync(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Remove(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.RemoveAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation asynchronously..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Update(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.UpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.BatchUpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations asynchronously.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DataOperations">
            <summary>
            DataOperation class that performs data operation in IEnumerable and IQueryable type data sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.Execute(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed</param>
            <param name="query">Query to be executed.</param>
            <returns>IEnumerable - resultant records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformFiltering(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR</param>
            <returns>IEnumerable - filtered records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSearching(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSkip(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="skip">Number of records to be skipped.</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformTake(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="take">Number of records to be taken.</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformGrouping(System.Collections.IEnumerable,System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.Execute``1(System.Collections.Generic.IEnumerable{``0},Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed</param>
            <param name="query">Query to be executed.</param>
            <returns>IEnumerable - resultant records</returns>
            <typeparam name="T">Type of the data source elements</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSkip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="skip">Number of records to be skipped.</param>
            <typeparam name="T">Type of the data source elements</typeparam>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformTake``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="take">Number of records to be taken.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformGrouping``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable - sorted records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable - sorted records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSelect(System.Collections.IEnumerable,System.Collections.Generic.List{System.String})">
            <summary>
            Selected the given field names alone from the data source.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="select">List of fields to select.</param>
            <returns>IEnumerale</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSearching``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformFiltering``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR</param>
            <returns>IEnumerable - filtered records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.Execute``1(System.Linq.IQueryable{``0},Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed</param>
            <param name="query">Query to be executed.</param>
            <returns>IQueryable - resultant records</returns>
            <typeparam name="T">Type of the data source elements</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformGrouping``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable - sorted records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable - sorted records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSkip``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="skip">Number of records to be skipped.</param>
            <typeparam name="T">Type of the data source elements</typeparam>
            <returns>IQueryable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformTake``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="take">Number of records to be taken.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSearching``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IQueryable - searched records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformFiltering``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR</param>
            <returns>IQueryable - filtered records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSelect``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Selected the given field names alone from the data source.
            </summary>
            <param name="dataSource">Input data source</param>
            <param name="select">List of fields to select.</param>
            <returns>IQueryable</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.DynamicObjectOperation">
            <summary>
            DataOperation class that performs data operation in DynamicObject type data sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformDataOperations(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="DataSource">Input data source.</param>
            <param name="queries">Query to be executed against data source.</param>
            <returns>IEnumerable - resultant records</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformSorting(System.Linq.IQueryable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the given data source.
            </summary>
            <param name="dataSource">Input data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IQuerable</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformFiltering(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Condition to merge two filter criteria.</param>
            <param name="columnTypes">Type collection of each property in data source</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformSearching(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter},System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
            <param name="columnTypes">Type collection of each property in data source</param>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PredicateBuilder(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Generates predicate from the filter criteria.
            </summary>
            <param name="dataSource">Data source to be filtered</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Condition to merge two filter criteria.</param>
            <param name="paramExpression">Parameter expression.</param>
            <param name="columnTypes">Type collection of each property in data source</param>
            <returns>Expression</returns>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.LocaleText">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.ID">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.ModelType">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.DataManager">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.TemplateClientChanges">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.UniqueId">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.DataContainer">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.DataHashTable">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.OnInitRenderAsync">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.DataBind(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.Trigger(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.UpdateModel(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.DataProcess(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.UpdateTemplate(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.EventData">
            <summary>
            Represents the event argument data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfDataBoundComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfDataBoundComponent.UpdateProperty``1(System.String,``0,``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Processing the property value changes and invoking the events for two-way bindings.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.DashboardLayoutEvents">
            <summary>
            Specifies the DashboardLayout events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutEvents.Changed">
            <summary>
            Triggers whenever the panels positions are changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutEvents.Created">
            <summary>
            Triggers when Dashboard Layout is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutEvents.Destroyed">
            <summary>
            Triggers when Dashboard Layout is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutEvents.Dragging">
            <summary>
            Triggers while a panel is dragged continuously.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutEvents.OnDragStart">
            <summary>
            Triggers when a panel is about to drag.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutEvents.OnDragStop">
            <summary>
            Triggers when a dragged panel is dropped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutEvents.Resizing">
            <summary>
            Triggers when a panel is being resized continuously.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutEvents.OnResizeStart">
            <summary>
            Triggers when a panel is start to resize.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutEvents.OnResizeStop">
            <summary>
            Triggers when a panel resize ends.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.DashboardLayoutPanels">
            <summary>
            Specifies the DashboardLayoutPanels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanels.ChildContent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanels.Panels">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.DashboardLayoutPanel">
            <summary>
            Specifies the DashboardLayoutPanel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.ChildContent">
             <summary>
             Defines the ChildContent of the panels.
             </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.HeaderTemplate">
            <summary>
            Defines the HeaderTemplate of the panels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.ContentTemplate">
            <summary>
            Defines the ContentTemplate of the panels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.AllowDragging">
            <summary>
            Defines the dragging panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.Col">
            <summary>
            Defines the column value where the panel to be placed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.Column">
            <summary>
            Defines the column value where the panel to be placed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.Content">
            <summary>
            Defines the template value that should be displayed as the panel's content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.CssClass">
            <summary>
            Defines the CSS class name that can be appended with each panel element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.Enabled">
            <summary>
            Defines whether to the panel should be enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.Header">
            <summary>
            Defines the template value that should be displayed as the panel's header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.Id">
            <summary>
            Defines the id of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.MaxSizeX">
            <summary>
            Specifies the maximum width of the panel in cells count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.MaxSizeY">
            <summary>
            Specifies the maximum height of the panel in cells count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.MinSizeX">
            <summary>
            Specifies the minimum width of the panel in cells count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.MinSizeY">
            <summary>
            Specifies the minimum height of the panel in cells count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.Row">
            <summary>
            Defines a row value where the panel should be placed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.SizeX">
            <summary>
            Specifies the width of the panel in the layout in cells count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.SizeY">
            <summary>
            Specifies the height of the panel in the layout in cells count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DashboardLayoutPanel.ZIndex">
            <summary>
            Specifies the z-index of the panel
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.ResizableHandle">
            <summary>
            Defines the dashboard panels resize handle position.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Layouts.ResizableHandle.SouthEast">
            <summary>
            Specifies south east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Layouts.ResizableHandle.SouthWest">
            <summary>
            Specifies south west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Layouts.ResizableHandle.NorthEast">
            <summary>
            Specifies north east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Layouts.ResizableHandle.NorthWest">
            <summary>
            Specifies north west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Layouts.ResizableHandle.North">
            <summary>
            Specifies north direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Layouts.ResizableHandle.South">
            <summary>
            Specifies south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Layouts.ResizableHandle.East">
            <summary>
            Specifies east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Layouts.ResizableHandle.West">
            <summary>
            Specifies west direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.ResizeArgs">
            <summary>
            Defines the resize event arguments
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeArgs.Element">
            <summary>
            Specifies the cell element being resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeArgs.Event">
            <summary>
            Specifies the original event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeArgs.IsInteracted">
            <summary>
            Specifies that event has triggered by user interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeArgs.Name">
            <summary>
            Specifies Event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeArgs.Id">
            <summary>
            Specifies Resizing panel id.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.ChangeEventArgs">
            <summary>
            Defines the change event arguments
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ChangeEventArgs.AddedPanels">
            <summary>
            Specifies the panel added to the DashboardLayout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ChangeEventArgs.ChangedPanels">
            <summary>
            Specifies the model values of the position changed panels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ChangeEventArgs.IsInteracted">
            <summary>
            Specifies that event has triggered by user interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ChangeEventArgs.RemovedPanels">
            <summary>
            Specifies the panels removed from the DashboardLayout.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.DragStartArgs">
            <summary>
            Defines the dragstart event arguments
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DragStartArgs.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DragStartArgs.Element">
            <summary>
            Specifies the cell element being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DragStartArgs.Event">
            <summary>
            Specifies the original event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DragStartArgs.Id">
            <summary>
            Specifies dragging panel id.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.DragStopArgs">
            <summary>
            Defines the dragstop event arguments
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DragStopArgs.Element">
            <summary>
            Specifies the cell element being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DragStopArgs.Event">
            <summary>
            Specifies the original event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DragStopArgs.Id">
            <summary>
            Specifies dragged panel id.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.DraggedEventArgs">
            <summary>
            Defines the Drag event arguments
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DraggedEventArgs.Element">
            <summary>
            Specifies the cell element being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DraggedEventArgs.Event">
            <summary>
            Specifies the original event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DraggedEventArgs.Target">
            <summary>
            Specifies the element below the cell element being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.DraggedEventArgs.Id">
            <summary>
            Specifies dragging panel id.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.PanelModel">
            <summary>
            Defines the PanelModel class for Panel
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.AllowDragging">
            <summary>
            Defines the dragging panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.Col">
            <summary>
            Defines the column value where the panel to be placed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.Column">
            <summary>
            Defines the column value where the panel to be placed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.Content">
            <summary>
            Defines the template value that should be displayed as the panel's content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.CssClass">
            <summary>
            Defines the CSS class name that can be appended with each panel element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.Enabled">
            <summary>
            Defines whether to the panel should be enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.Header">
            <summary>
            Defines the template value that should be displayed as the panel's header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.Id">
            <summary>
            Defines the id of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.MaxSizeX">
            <summary>
            Specifies the maximum width of the panel in cells count.
            
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.MaxSizeY">
            <summary>
            Specifies the maximum height of the panel in cells count.
            
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.MinSizeX">
            <summary>
            Specifies the minimum width of the panel in cells count.
            
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.MinSizeY">
            <summary>
            Specifies the minimum height of the panel in cells count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.Row">
            <summary>
            Defines a row value where the panel should be placed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.SizeX">
            <summary>
            Specifies the width of the panel in the layout in cells count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.SizeY">
            <summary>
            Specifies the height of the panel in the layout in cells count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanelModel.ZIndex">
            <summary>
            Specifies the z-index of the panel
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.HeaderContentId">
            <summary>
            Defines the panels id and the header content element height
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.HeaderContentId.Id">
            <summary>
            Specifies the header content id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.HeaderContentId.Height">
            <summary>
            Specifies the header content height.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.SfDashboardLayout">
            <summary>
            The DashboardLayout is a grid structured layout component, that helps to create a dashboard with panels.
            Panels hold the UI components or data to be visualized with flexible options like resize, reorder, drag-n-drop, remove and add,
            that allows users to easily place the panels at a desired position within the grid layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.ID">
            <summary>
            Sets id attribute for the dashboard element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.ChildContent">
             <summary>
             Specifies the child content.
             </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.AllowDragging">
            <summary>
            If allowDragging is set to true, then the DashboardLayout allows you to drag and reorder the panels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.AllowFloating">
            <summary>
            If allowFloating is set to true, then the DashboardLayout automatically move the panels upwards to fill the empty available
            cells while dragging or resizing the panels.
            
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.AllowResizing">
            <summary>
            If allowResizing is set to true, then the DashboardLayout allows you to resize the panels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.CellAspectRatio">
            <summary>
            Defines the cell aspect ratio of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.CellSpacing">
            <summary>
            Defines the spacing between the panels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.Columns">
            <summary>
            Defines the number of columns to be created in the DashboardLayout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.DraggableHandle">
            <summary>
            Defines the draggable handle selector which will act as dragging handler for the panels.
            
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.EnableHtmlSanitizer">
            <summary>
            Defines whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.MediaQuery">
            <summary>
            Defines the media query value where the dashboardlayout becomes stacked layout when the resolution meets.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.HtmlAttributes">
            <summary>
            Used to specify an additional html attributes such as styles, class, and more to the root element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.Panels">
            <summary>
            Defines the panels property of the DashboardLayout component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.ResizableHandles">
            <summary>
            Defines the resizing handles directions used for resizing the panels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfDashboardLayout.ShowGridLines">
            <summary>
            Enables or disables the grid lines for the Dashboard Layout panels.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.MovePanel(System.String,System.Int32,System.Int32)">
            <summary>
            Moves the panel in the DashboardLayout.
            idValue - Specifies the Id value of moved panel.
            rowValue - Specifies the Row value of moved panel
            colValue - Specifies the Column value of moved panel
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.MovePanelAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Moves the panel in the DashboardLayout.
            idValue - Specifies the Id value of moved panel.
            rowValue - Specifies the Row value of moved panel
            colValue - Specifies the Column value of moved panel
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.RemoveAll">
            <summary>
            Removes all the panels from the DashboardLayout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.RemoveAllAsync">
            <summary>
            Removes all the panels from the DashboardLayout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.RemovePanel(System.String)">
            <summary>
            Removes the panel from the DashboardLayout.
            idValue - Specifies the Id value of remove panel.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.ResizePanel(System.String,System.Int32,System.Int32)">
            <summary>
            Resize the panel in the DashboardLayout.
            idValue - Specifies the Id value of resize panel.
            sizeXValue - Specifies the SizeX value of resize panel.
            sizeYValue - Specifies the SizeY value of resize panel.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.ResizePanelAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Resize the panel in the DashboardLayout.
            idValue - Specifies the Id value of resize panel.
            sizeXValue - Specifies the SizeX value of resize panel.
            sizeYValue - Specifies the SizeY value of resize panel.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.Serialize">
            <summary>
            Returns the panels object of the DashboardLayout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.AddPanel(Syncfusion.Blazor.Layouts.PanelModel)">
            <summary>
            Allows to add a panel to the Dashboardlayout.
            panel - Specifies the adding panel.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.CalculateSize(System.Int32[],System.Boolean,System.Boolean,System.Collections.Generic.List{Syncfusion.Blazor.Layouts.HeaderContentId})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.TriggerResizeStart(System.Boolean,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.TriggerDragStart(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.TriggerDragStop(System.String,System.Collections.Generic.List{System.String})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.TriggerDraging(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.PanelChangedEvent(System.Boolean,System.Collections.Generic.List{System.String})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfDashboardLayout.AddPanelInternal(Syncfusion.Blazor.Layouts.PanelModel,Syncfusion.Blazor.Layouts.DashboardLayoutPanel)">
            <summary>
            Allows to add a panel to the Dashboardlayout.
            panel - Specifies the adding panel.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.BeforeSanitizeHtmlArgs">
            <summary>
            Provides information about a BeforeSanitizeHtml event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.BeforeSanitizeHtmlArgs.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.BeforeSanitizeHtmlArgs.Helper">
            <summary>
            It is a callback function and executed it before our inbuilt action. It should return HTML as a string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.BeforeSanitizeHtmlArgs.Selectors">
            <summary>
            Returns the selectors object which carrying both tags and attributes selectors to block list of cross-site scripting attack.
             Also possible to modify the block list in this event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.SanitizeRemoveAttrs">
            <summary>
            Provides information about a SanitizeRemoveAttributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SanitizeRemoveAttrs.Attribute">
            <summary>
            Defines the attribute name to sanitize
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SanitizeRemoveAttrs.Selector">
            <summary>
            Defines the selector that sanitize the specified attributes within the selector
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.SanitizeSelectors">
            <summary>
            Provides information about a SanitizeSelectors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SanitizeSelectors.Attributes">
            <summary>
            Returns the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SanitizeSelectors.Tags">
            <summary>
            Returns the tags.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.SplitterEvents">
            <summary>
            Configure the event handlers to handle the events with Splitter component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterEvents.OnCollapse">
            <summary>
            Triggers on collapsing the panes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterEvents.OnExpand">
            <summary>
            Triggers on expanding the panes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterEvents.Collapsed">
            <summary>
            Triggers when the panes get collapsed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterEvents.Created">
            <summary>
            Triggers after creating the splitter component with its panes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterEvents.Expanded">
            <summary>
            Triggers when the panes get expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterEvents.OnResizeStart">
            <summary>
            Triggers when the split pane is started to resize.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterEvents.OnResizeStop">
            <summary>
            Triggers when the resizing of split pane is stopped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterEvents.Destroyed">
            <summary>
            The event triggers when the splitter is destroyed with its elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterEvents.OnSanitizeHtml">
            <summary>
            Event triggers before sanitize the value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterEvents.Resizing">
            <summary>
            Triggers when a split pane is being resized.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.SplitterPane">
            <summary>
            Configure each pane and its properties to handle the pane behavior.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.ChildContent">
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.ContentTemplate">
            <summary>
            Defines the pane content as a template  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.Collapsed">
            <summary>
            Specifies whether a pane is collapsed on the initial rendering of the splitter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.CollapsedChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.Collapsible">
            <summary>
            Specifies whether a pane is capable to collapse.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.Content">
            <summary>
            Specifies the content of the split pane.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.CssClass">
            <summary>
            Specifies the CSS class names that defines specific user-defined styles and themes
            to be appended on the corresponding pane of the Splitter.
            It is used to customize the Splitter component panes.
            One or more custom CSS classes can be specified to the Splitter panes.  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.Max">
            <summary>
            Specifies the maximum size of a pane. The pane cannot be resized more than the specified maximum limit.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.MaxChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.Min">
            <summary>
            Specifies the minimum size of a pane. The pane cannot be resized less than the specified minimum size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.MinChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.Resizable">
            <summary>
            Specifies the value whether a pane is resizable or not. By default, the Splitter panes are resizable.
            You can disable resize functionality for any specific panes using this property.  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.Size">
            <summary>
            SizeConfigures the properties for each pane. For horizontal splitter, the size act as width.
            For vertical splitter, the size act as height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPane.SizeChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.SplitterPanes">
            <summary>
            Configure one or more panes to construct different layouts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SplitterPanes.ChildContent">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.SfSplitter">
            <summary>
            The splitter is a layout user interface (UI) component that splits the layout into multiple panes with resizable and collapsible support.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.ID">
            <summary>
            Specifies the unique identifier
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.ChildContent">
            <summary>
            Sets the content for panes of the Splitter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.CssClass">
            <summary>
            Specifies the CSS class names that defines specific user-defined styles and
            themes to be appended on the root element of the Splitter.
            It is used to customize the Splitter component.
            One or more custom CSS classes can be specified to the Splitter.  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left (RTL) direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.Enabled">
            <summary>
            Specifies a Boolean value that indicates whether the component is enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.EnablePersistence">
            <summary>
            Enables or disables the persisting component's state between page reloads.
            If enabled, the pane settings of Splitter is persisted
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.Height">
            <summary>
            Specifies the height of the Splitter component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.Orientation">
            <summary>
            Specifies a value that indicates whether to align the split panes horizontally or vertically.
            Set the orientation property as "Horizontal" to create a horizontal splitter that aligns the panes left-to-right.
            Set the orientation property as "Vertical" to create a vertical splitter that aligns the panes top-to-bottom.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.PaneSettings">
            <summary>
            Configures the individual pane behaviors such as content, size, resizable, minimum, maximum validation, collapsible, and collapsed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.SeparatorSize">
            <summary>
            Specifies the size of the separator line for both horizontal and vertical orientation.
            The separator is used to separate the panes by lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.Width">
            <summary>
            Specifies the width of the Splitter component. The value can be either in pixel or percentage format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.HtmlAttributes">
            <summary>
            You can add the additional Html attributes such as id, title, etc., to the splitter element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.EnableHtmlSanitizer">
            <summary>
            Defines whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.SfSplitter.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.AddPane(Syncfusion.Blazor.Layouts.SplitterPane,System.Int32)">
            <summary>
            Allows you to add a pane dynamically to the specified index position by passing the pane properties.  
            </summary>
            <param name="paneProperties"> Specifies the pane's properties that apply to new pane</param>
            <param name="index">Specifies the index where the pane will be inserted.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.Collapse(System.Double)">
            <summary>
            collapses corresponding pane based on the index is passed.
            </summary>
            <param name="index"> Specifies the index value of the corresponding pane to be collapsed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.Expand(System.Double)">
            <summary>
            Expands the corresponding pane based on the index is passed.  
            </summary>
            <param name="index"> Specifies the index value of the corresponding pane to be Expanded.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.RemovePane(System.Int32)">
            <summary>
            Allows you to remove the specified pane dynamically by passing its index value
            </summary>
            <param name="index">Specifies the index value to remove the corresponding pane.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.Refresh">
            <summary>
            Refreshes the splitter.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.AddPaneAsync(Syncfusion.Blazor.Layouts.SplitterPane,System.Int32)">
            <summary>
            Allows you to add a pane dynamically to the specified index position by passing the pane properties.  
            </summary>
            <param name="paneProperties"> Specifies the pane's properties that apply to new pane</param>
            <param name="index">Specifies the index where the pane will be inserted.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.RemovePaneAsync(System.Int32)">
            <summary>
            Allows you to remove the specified pane dynamically by passing its index value
            </summary>
            <param name="index">Specifies the index value to remove the corresponding pane.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.CreatedEvent">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.ResizeStartEvent(Syncfusion.Blazor.Layouts.ResizeEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.ResizingEvent(Syncfusion.Blazor.Layouts.ResizingEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.ResizeStopEvent(Syncfusion.Blazor.Layouts.ResizingEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.OnCollapseEvent(System.Int32,Syncfusion.Blazor.Layouts.BeforeExpandEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.OnExpandEvent(Syncfusion.Blazor.Layouts.BeforeExpandEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.CollapsedEvent(Syncfusion.Blazor.Layouts.ExpandedEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.UpdateCollapsed(System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Layouts.SfSplitter.ExpandedEvent(Syncfusion.Blazor.Layouts.ExpandedEventArgs)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.Orientation">
            <summary>
            Specifies a value that indicates whether to align the split panes horizontally or vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Layouts.Orientation.Horizontal">
            <summary>
             Defines Splitter as Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Layouts.Orientation.Vertical">
            <summary>
            Defines Splitter as Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.BeforeExpandEventArgs">
            <summary>
            Provides data for the BeforeExpand event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.BeforeExpandEventArgs.Cancel">
            <summary>
            The argument determines whether the action can be canceled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.BeforeExpandEventArgs.Element">
            <summary>
            Returns the root element of the Splitter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.BeforeExpandEventArgs.Event">
            <summary>
            Returns the original event arguments when you trigger the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.BeforeExpandEventArgs.Index">
            <summary>
            Returns the index of a pane
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.BeforeExpandEventArgs.Pane">
            <summary>
            Returns the pane elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.BeforeExpandEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.BeforeExpandEventArgs.Separator">
            <summary>
            Returns the corresponding split-bar element
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.ExpandedEventArgs">
            <summary>
            Provides data for the Expanded event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ExpandedEventArgs.Element">
            <summary>
            Returns the root element of the Splitter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ExpandedEventArgs.Event">
            <summary>
            Returns the original event arguments when you trigger the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ExpandedEventArgs.Index">
            <summary>
            Returns the index of a pane
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ExpandedEventArgs.Pane">
            <summary>
            Returns the pane elements
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ExpandedEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ExpandedEventArgs.Separator">
            <summary>
            Returns the corresponding split-bar element
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.ResizeEventArgs">
            <summary>
            Provides data for a Resize event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeEventArgs.Cancel">
            <summary>
            Controls the resize action when the resize action happens continuously.
            When you set this argument to true, the resize process will be stopped. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeEventArgs.Element">
            <summary>
            Returns the root element of the Splitter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeEventArgs.Event">
            <summary>
            Returns the original event arguments when you trigger the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeEventArgs.Index">
            <summary>
            Returns the index of a pane
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeEventArgs.Pane">
            <summary>
            Contains the corresponding resizing pane.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizeEventArgs.Separator">
            <summary>
            Contains the resizing panes separator element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.ResizingEventArgs">
            <summary>
            Provides data for a Resizing event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizingEventArgs.Element">
            <summary>
            Returns the root element of the Splitter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizingEventArgs.Event">
            <summary>
            Returns the original event arguments when you trigger the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizingEventArgs.Index">
            <summary>
            Returns the index of a pane
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizingEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizingEventArgs.Pane">
            <summary>
            Contains the corresponding resizing pane.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizingEventArgs.PaneSize">
            <summary>
            CContains the pane size when it resizes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.ResizingEventArgs.Separator">
            <summary>
            Contains the resizing panes separator element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Layouts.PanePropertiesModel">
            <summary>
            Interface for a class PaneProperties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanePropertiesModel.Collapsed">
            <summary>
            Specifies whether a pane is collapsed on the initial rendering of the splitter. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanePropertiesModel.Collapsible">
            <summary>
            Specifies whether a pane is capable to collapse.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanePropertiesModel.Content">
            <summary>
            Specifies the content of the split pane.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanePropertiesModel.CssClass">
            <summary>
            Specifies the CSS class names that defines specific user-defined styles and themes
            to be appended on the corresponding pane of the Splitter.
            It is used to customize the Splitter component panes.
            One or more custom CSS classes can be specified to the Splitter panes.  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanePropertiesModel.Max">
            <summary>
            Specifies the maximum size of a pane. The pane cannot be resized more than the specified maximum limit.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanePropertiesModel.Min">
            <summary>
            Specifies the minimum size of a pane. The pane cannot be resized less than the specified minimum size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanePropertiesModel.Resizable">
            <summary>
            Specifies the value whether a pane is resizable or not. By default, the Splitter panes are resizable.
            You can disable resize functionality for any specific panes using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.PanePropertiesModel.Size">
            <summary>
            Configures the properties for each pane. For horizontal splitter, the size act as width.
            For vertical splitter, the size act as height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.Internal.PaneSetting.Collapsed">
            <summary>
            Specifies whether a pane is collapsed on the initial rendering of the splitter. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.Internal.PaneSetting.Max">
            <summary>
            Specifies the maximum size of a pane. The pane cannot be resized more than the specified maximum limit.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.Internal.PaneSetting.Min">
            <summary>
            Specifies the minimum size of a pane. The pane cannot be resized less than the specified minimum size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.Internal.PaneSetting.Size">
            <summary>
            Configures the properties for each pane. For horizontal splitter, the size act as width.
            For vertical splitter, the size act as height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.Internal.Pane.PaneIndex">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.Internal.Pane.PaneSetting">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.Internal.Separator.PaneIndex">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Layouts.Internal.Separator.PaneSetting">
            <exclude/>
        </member>
    </members>
</doc>
